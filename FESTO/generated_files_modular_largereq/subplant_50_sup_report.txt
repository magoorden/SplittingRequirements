Reading CIF file "generated_files_modular_largereq/subplant_50.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_clamp         0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   A_turntable     1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   PTimer          2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   S_atdrill       3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   S_Pinitialized  4      1 * 2     2 * 2       2 * 2       100%
  6      location pointer  n/a   S_turntable     5      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          6      14        26          28          ~93%

Applying automatic variable ordering:
  Number of hyperedges: 14

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    4 (total)                 0.29 (avg/edge) [before]
    Total span:                    4 (total)                 0.29 (avg/edge) [iteration 1]
    Total span:                    4 (total)                 0.29 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    4 (total)                 0.29 (avg/edge) [before]
    Total span:                    4 (total)                 0.29 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     S_atdrill.Off
Initial   (aut/locs init predicate):     S_turntable.On
Initial   (aut/locs init predicate):     S_Pinitialized.Off
Initial   (aut/locs init predicate):     A_turntable.Off
Initial   (aut/locs init predicate):     A_clamp.Off
Initial   (aut/locs init predicate):     PTimer.Off
Initial   (auts/locs init predicate):    A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Initial   (uncontrolled system):         A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Initial   (system, combined init/inv):   A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   S_atdrill.Off
Marked    (aut/locs marker predicate):   S_turntable.On
Marked    (aut/locs marker predicate):   S_Pinitialized.Off
Marked    (aut/locs marker predicate):   A_turntable.Off
Marked    (aut/locs marker predicate):   A_clamp.Off
Marked    (aut/locs marker predicate):   PTimer.Off
Marked    (auts/locs marker predicate):  A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Marked    (uncontrolled system):         A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Marked    (system, combined marked/inv): A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))

State/event exclusion requirements:
  Event "A_clamp_c_on" needs:
    A_turntable.Off and PTimer.Timeout and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: S_atdrill_u_off) (guard: S_atdrill.On) (assignments: S_atdrill := S_atdrill.Off)
    Edge: (event: S_atdrill_u_on) (guard: S_atdrill.Off) (assignments: S_atdrill := S_atdrill.On)
    Edge: (event: S_turntable_u_off) (guard: S_turntable.On) (assignments: S_turntable := S_turntable.Off)
    Edge: (event: S_turntable_u_on) (guard: S_turntable.Off) (assignments: S_turntable := S_turntable.On)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_turntable_c_off) (guard: A_turntable.On) (assignments: A_turntable := A_turntable.Off)
    Edge: (event: A_turntable_c_on) (guard: A_turntable.Off) (assignments: A_turntable := A_turntable.On)
    Edge: (event: A_clamp_c_off) (guard: A_clamp.On) (assignments: A_clamp := A_clamp.Off)
    Edge: (event: A_clamp_c_on) (guard: A_clamp.Off) (assignments: A_clamp := A_clamp.On)
    Edge: (event: PTimer_c_on) (guard: PTimer.Off) (assignments: PTimer := PTimer.Running)
    Edge: (event: PTimer_u_timeout) (guard: PTimer.Running) (assignments: PTimer := PTimer.Timeout)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Running) (assignments: PTimer := PTimer.Off)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Timeout) (assignments: PTimer := PTimer.Off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "PTimer" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: A_clamp_c_on) (guard: A_clamp.Off) (assignments: A_clamp := A_clamp.On): guard: A_clamp.Off -> A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) [requirement: A_turntable.Off and PTimer.Timeout and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: S_atdrill_u_off) (guard: S_atdrill.On) (assignments: S_atdrill := S_atdrill.Off)
    Edge: (event: S_atdrill_u_on) (guard: S_atdrill.Off) (assignments: S_atdrill := S_atdrill.On)
    Edge: (event: S_turntable_u_off) (guard: S_turntable.On) (assignments: S_turntable := S_turntable.Off)
    Edge: (event: S_turntable_u_on) (guard: S_turntable.Off) (assignments: S_turntable := S_turntable.On)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_turntable_c_off) (guard: A_turntable.On) (assignments: A_turntable := A_turntable.Off)
    Edge: (event: A_turntable_c_on) (guard: A_turntable.Off) (assignments: A_turntable := A_turntable.On)
    Edge: (event: A_clamp_c_off) (guard: A_clamp.On) (assignments: A_clamp := A_clamp.Off)
    Edge: (event: A_clamp_c_on) (guard: A_clamp.Off -> A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))) (assignments: A_clamp := A_clamp.On)
    Edge: (event: PTimer_c_on) (guard: PTimer.Off) (assignments: PTimer := PTimer.Running)
    Edge: (event: PTimer_u_timeout) (guard: PTimer.Running) (assignments: PTimer := PTimer.Timeout)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Running) (assignments: PTimer := PTimer.Off)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Timeout) (assignments: PTimer := PTimer.Off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On)) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On)) -> A_clamp.Off and A_turntable.Off and (PTimer.Off and (S_Pinitialized.Off and S_turntable.On)) [backward reach with edge: (event: S_atdrill_u_off) (guard: S_atdrill.On) (assignments: S_atdrill := S_atdrill.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_clamp.Off and A_turntable.Off and (PTimer.Off and (S_Pinitialized.Off and S_turntable.On)) -> A_clamp.Off and A_turntable.Off and (PTimer.Off and S_Pinitialized.Off) [backward reach with edge: (event: S_turntable_u_on) (guard: S_turntable.Off) (assignments: S_turntable := S_turntable.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_clamp.Off and A_turntable.Off and (PTimer.Off and S_Pinitialized.Off) -> A_clamp.Off and (A_turntable.Off and PTimer.Off) [backward reach with edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) -> A_clamp.Off and PTimer.Off [backward reach with edge: (event: A_turntable_c_off) (guard: A_turntable.On) (assignments: A_turntable := A_turntable.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_clamp.Off and PTimer.Off -> PTimer.Off [backward reach with edge: (event: A_clamp_c_off) (guard: A_clamp.On) (assignments: A_clamp := A_clamp.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: PTimer.Off -> not PTimer.Timeout [backward reach with edge: (event: PTimer_c_reset) (guard: PTimer.Running) (assignments: PTimer := PTimer.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: not PTimer.Timeout -> true [backward reach with edge: (event: PTimer_c_reset) (guard: PTimer.Timeout) (assignments: PTimer := PTimer.Off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On)) -> A_clamp.Off and A_turntable.Off and (PTimer.Off and (S_Pinitialized.Off and S_turntable.On)) [forward reach with edge: (event: S_atdrill_u_on) (guard: S_atdrill.Off) (assignments: S_atdrill := S_atdrill.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off and A_turntable.Off and (PTimer.Off and (S_Pinitialized.Off and S_turntable.On)) -> A_clamp.Off and A_turntable.Off and (PTimer.Off and S_Pinitialized.Off) [forward reach with edge: (event: S_turntable_u_off) (guard: S_turntable.On) (assignments: S_turntable := S_turntable.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off and A_turntable.Off and (PTimer.Off and S_Pinitialized.Off) -> A_clamp.Off and (A_turntable.Off and PTimer.Off) [forward reach with edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off and (A_turntable.Off and PTimer.Off) -> A_clamp.Off and PTimer.Off [forward reach with edge: (event: A_turntable_c_on) (guard: A_turntable.Off) (assignments: A_turntable := A_turntable.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off and PTimer.Off -> A_clamp.Off and not PTimer.Timeout [forward reach with edge: (event: PTimer_c_on) (guard: PTimer.Off) (assignments: PTimer := PTimer.Running), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off and not PTimer.Timeout -> A_clamp.Off [forward reach with edge: (event: PTimer_u_timeout) (guard: PTimer.Running) (assignments: PTimer := PTimer.Timeout), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: A_clamp.Off -> A_clamp.On and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) [forward reach with edge: (event: A_clamp_c_on) (guard: A_clamp.Off -> A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))) (assignments: A_clamp := A_clamp.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.On and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) -> A_clamp.On and (A_turntable.Off and not PTimer.Running) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) [forward reach with edge: (event: PTimer_c_reset) (guard: PTimer.Timeout) (assignments: PTimer := PTimer.Off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: A_clamp.On and (A_turntable.Off and not PTimer.Running) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) -> A_clamp.On and A_turntable.Off and (not PTimer.Running and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) [forward reach with edge: (event: S_atdrill_u_off) (guard: S_atdrill.On) (assignments: S_atdrill := S_atdrill.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.On and A_turntable.Off and (not PTimer.Running and (S_Pinitialized.On and S_turntable.On)) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) -> A_clamp.On and A_turntable.Off and (not PTimer.Running and S_Pinitialized.On) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) [forward reach with edge: (event: S_turntable_u_off) (guard: S_turntable.On) (assignments: S_turntable := S_turntable.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.On and A_turntable.Off and (not PTimer.Running and S_Pinitialized.On) or (A_clamp.Off and not PTimer.Running or A_clamp.Off and PTimer.Running) -> (A_clamp.Off or A_turntable.Off) and (A_clamp.Off or (A_turntable.On or not PTimer.Running)) [forward reach with edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A_clamp.Off or A_turntable.Off) and (A_clamp.Off or (A_turntable.On or not PTimer.Running)) -> A_clamp.Off or not PTimer.Running [forward reach with edge: (event: A_turntable_c_on) (guard: A_turntable.Off) (assignments: A_turntable := A_turntable.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_clamp.Off or not PTimer.Running -> true [forward reach with edge: (event: PTimer_c_on) (guard: PTimer.Off) (assignments: PTimer := PTimer.Running), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: A_turntable_c_off) (guard: A_turntable.On) (assignments: A_turntable := A_turntable.Off): guard: A_turntable.On -> A_turntable.On.
Edge (event: A_turntable_c_on) (guard: A_turntable.Off) (assignments: A_turntable := A_turntable.On): guard: A_turntable.Off -> A_turntable.Off.
Edge (event: A_clamp_c_off) (guard: A_clamp.On) (assignments: A_clamp := A_clamp.Off): guard: A_clamp.On -> A_clamp.On.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: S_atdrill_u_off) (guard: S_atdrill.On) (assignments: S_atdrill := S_atdrill.Off)
    Edge: (event: S_atdrill_u_on) (guard: S_atdrill.Off) (assignments: S_atdrill := S_atdrill.On)
    Edge: (event: S_turntable_u_off) (guard: S_turntable.On) (assignments: S_turntable := S_turntable.Off)
    Edge: (event: S_turntable_u_on) (guard: S_turntable.Off) (assignments: S_turntable := S_turntable.On)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_turntable_c_off) (guard: A_turntable.On -> A_turntable.On) (assignments: A_turntable := A_turntable.Off)
    Edge: (event: A_turntable_c_on) (guard: A_turntable.Off -> A_turntable.Off) (assignments: A_turntable := A_turntable.On)
    Edge: (event: A_clamp_c_off) (guard: A_clamp.On -> A_clamp.On) (assignments: A_clamp := A_clamp.Off)
    Edge: (event: A_clamp_c_on) (guard: A_clamp.Off -> A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))) (assignments: A_clamp := A_clamp.On)
    Edge: (event: PTimer_c_on) (guard: PTimer.Off) (assignments: PTimer := PTimer.Running)
    Edge: (event: PTimer_u_timeout) (guard: PTimer.Running) (assignments: PTimer := PTimer.Timeout)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Running) (assignments: PTimer := PTimer.Off)
    Edge: (event: PTimer_c_reset) (guard: PTimer.Timeout) (assignments: PTimer := PTimer.Off)

Controlled system:                     exactly 96 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Initial (controlled system):           A_clamp.Off and (A_turntable.Off and PTimer.Off) and (S_atdrill.Off and (S_Pinitialized.Off and S_turntable.On))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_turntable_c_off: guard: A_turntable.On -> true [assume A_turntable.On].
  Event A_turntable_c_on: guard: A_turntable.Off -> true [assume A_turntable.Off].
  Event A_clamp_c_off: guard: A_clamp.On -> true [assume A_clamp.On].
  Event A_clamp_c_on: guard: A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On)) -> true [assume A_clamp.Off and (A_turntable.Off and PTimer.Timeout) and (S_atdrill.On and (S_Pinitialized.On and S_turntable.On))].
  Event PTimer_c_on: guard: PTimer.Off -> true [assume PTimer.Off].
  Event PTimer_c_reset: guard: not PTimer.Off -> true [assume not PTimer.Off].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_50_sup.cif".
