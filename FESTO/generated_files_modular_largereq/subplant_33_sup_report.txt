Reading CIF file "generated_files_modular_largereq/subplant_33.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_pusher        0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   S_Tinitialized  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   TTimer          2      2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          3      8         14          16          ~88%

Applying automatic variable ordering:
  Number of hyperedges: 8

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    1 (total)                 0.13 (avg/edge) [before]
    Total span:                    1 (total)                 0.13 (avg/edge) [iteration 1]
    Total span:                    1 (total)                 0.13 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    1 (total)                 0.13 (avg/edge) [before]
    Total span:                    1 (total)                 0.13 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     S_Tinitialized.Off
Initial   (aut/locs init predicate):     A_pusher.Off
Initial   (aut/locs init predicate):     TTimer.Off
Initial   (auts/locs init predicate):    A_pusher.Off and (S_Tinitialized.Off and TTimer.Off)
Initial   (uncontrolled system):         A_pusher.Off and (S_Tinitialized.Off and TTimer.Off)
Initial   (system, combined init/inv):   A_pusher.Off and (S_Tinitialized.Off and TTimer.Off)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   S_Tinitialized.Off
Marked    (aut/locs marker predicate):   A_pusher.Off
Marked    (aut/locs marker predicate):   not TTimer.Running
Marked    (auts/locs marker predicate):  A_pusher.Off and (S_Tinitialized.Off and not TTimer.Running)
Marked    (uncontrolled system):         A_pusher.Off and (S_Tinitialized.Off and not TTimer.Running)
Marked    (system, combined marked/inv): A_pusher.Off and (S_Tinitialized.Off and not TTimer.Running)

State/event exclusion requirements:
  Event "TTimer_c_reset" needs:
    A_pusher.On and S_Tinitialized.On

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: S_Tinitialized_u_off) (guard: S_Tinitialized.On) (assignments: S_Tinitialized := S_Tinitialized.Off)
    Edge: (event: S_Tinitialized_u_on) (guard: S_Tinitialized.Off) (assignments: S_Tinitialized := S_Tinitialized.On)
    Edge: (event: A_pusher_c_off) (guard: A_pusher.On) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: A_pusher.Off) (assignments: A_pusher := A_pusher.On)
    Edge: (event: TTimer_c_on) (guard: TTimer.Off) (assignments: TTimer := TTimer.Running)
    Edge: (event: TTimer_u_timeout) (guard: TTimer.Running) (assignments: TTimer := TTimer.Timeout)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Running) (assignments: TTimer := TTimer.Off)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Timeout) (assignments: TTimer := TTimer.Off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "TTimer" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: TTimer_c_reset) (guard: TTimer.Running) (assignments: TTimer := TTimer.Off): guard: TTimer.Running -> A_pusher.On and (S_Tinitialized.On and TTimer.Running) [requirement: A_pusher.On and S_Tinitialized.On].
Edge (event: TTimer_c_reset) (guard: TTimer.Timeout) (assignments: TTimer := TTimer.Off): guard: TTimer.Timeout -> A_pusher.On and (S_Tinitialized.On and TTimer.Timeout) [requirement: A_pusher.On and S_Tinitialized.On].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: S_Tinitialized_u_off) (guard: S_Tinitialized.On) (assignments: S_Tinitialized := S_Tinitialized.Off)
    Edge: (event: S_Tinitialized_u_on) (guard: S_Tinitialized.Off) (assignments: S_Tinitialized := S_Tinitialized.On)
    Edge: (event: A_pusher_c_off) (guard: A_pusher.On) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: A_pusher.Off) (assignments: A_pusher := A_pusher.On)
    Edge: (event: TTimer_c_on) (guard: TTimer.Off) (assignments: TTimer := TTimer.Running)
    Edge: (event: TTimer_u_timeout) (guard: TTimer.Running) (assignments: TTimer := TTimer.Timeout)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Running -> A_pusher.On and (S_Tinitialized.On and TTimer.Running)) (assignments: TTimer := TTimer.Off)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Timeout -> A_pusher.On and (S_Tinitialized.On and TTimer.Timeout)) (assignments: TTimer := TTimer.Off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_pusher.Off and (S_Tinitialized.Off and not TTimer.Running) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_pusher.Off and (S_Tinitialized.Off and not TTimer.Running) -> A_pusher.Off and not TTimer.Running [backward reach with edge: (event: S_Tinitialized_u_off) (guard: S_Tinitialized.On) (assignments: S_Tinitialized := S_Tinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_pusher.Off and not TTimer.Running -> not TTimer.Running [backward reach with edge: (event: A_pusher_c_off) (guard: A_pusher.On) (assignments: A_pusher := A_pusher.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: not TTimer.Running -> true [backward reach with edge: (event: TTimer_u_timeout) (guard: TTimer.Running) (assignments: TTimer := TTimer.Timeout), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_pusher.Off and (S_Tinitialized.Off and TTimer.Off) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_pusher.Off and (S_Tinitialized.Off and TTimer.Off) -> A_pusher.Off and TTimer.Off [forward reach with edge: (event: S_Tinitialized_u_on) (guard: S_Tinitialized.Off) (assignments: S_Tinitialized := S_Tinitialized.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_pusher.Off and TTimer.Off -> TTimer.Off [forward reach with edge: (event: A_pusher_c_on) (guard: A_pusher.Off) (assignments: A_pusher := A_pusher.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: TTimer.Off -> not TTimer.Timeout [forward reach with edge: (event: TTimer_c_on) (guard: TTimer.Off) (assignments: TTimer := TTimer.Running), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not TTimer.Timeout -> true [forward reach with edge: (event: TTimer_u_timeout) (guard: TTimer.Running) (assignments: TTimer := TTimer.Timeout), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: A_pusher_c_off) (guard: A_pusher.On) (assignments: A_pusher := A_pusher.Off): guard: A_pusher.On -> A_pusher.On.
Edge (event: A_pusher_c_on) (guard: A_pusher.Off) (assignments: A_pusher := A_pusher.On): guard: A_pusher.Off -> A_pusher.Off.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: S_Tinitialized_u_off) (guard: S_Tinitialized.On) (assignments: S_Tinitialized := S_Tinitialized.Off)
    Edge: (event: S_Tinitialized_u_on) (guard: S_Tinitialized.Off) (assignments: S_Tinitialized := S_Tinitialized.On)
    Edge: (event: A_pusher_c_off) (guard: A_pusher.On -> A_pusher.On) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: A_pusher.Off -> A_pusher.Off) (assignments: A_pusher := A_pusher.On)
    Edge: (event: TTimer_c_on) (guard: TTimer.Off) (assignments: TTimer := TTimer.Running)
    Edge: (event: TTimer_u_timeout) (guard: TTimer.Running) (assignments: TTimer := TTimer.Timeout)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Running -> A_pusher.On and (S_Tinitialized.On and TTimer.Running)) (assignments: TTimer := TTimer.Off)
    Edge: (event: TTimer_c_reset) (guard: TTimer.Timeout -> A_pusher.On and (S_Tinitialized.On and TTimer.Timeout)) (assignments: TTimer := TTimer.Off)

Controlled system:                     exactly 12 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         A_pusher.Off and (S_Tinitialized.Off and TTimer.Off)
Initial (controlled system):           A_pusher.Off and (S_Tinitialized.Off and TTimer.Off)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_pusher_c_off: guard: A_pusher.On -> true [assume A_pusher.On].
  Event A_pusher_c_on: guard: A_pusher.Off -> true [assume A_pusher.Off].
  Event TTimer_c_on: guard: TTimer.Off -> true [assume TTimer.Off].
  Event TTimer_c_reset: guard: A_pusher.On and (S_Tinitialized.On and TTimer.Timeout) or A_pusher.On and (S_Tinitialized.On and TTimer.Running) -> true [assume A_pusher.On and (S_Tinitialized.On and TTimer.Timeout) or A_pusher.On and (S_Tinitialized.On and TTimer.Running)].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_33_sup.cif".
