Reading CIF file "generated_files_modular_largereq/subplant_1.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name             Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ---------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_elevator_down  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   A_pusher         1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   PusherLift       2      2 * 2     4 * 2       4 * 2       100%
  -----  ----------------  ----  ---------------  -----  --------  ----------  ----------  -----------
  Total                                           3      8         16          16          100%

Applying automatic variable ordering:
  Number of hyperedges: 4

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    6 (total)                 1.50 (avg/edge) [before]
    Total span:                    4 (total)                 1.00 (avg/edge) [iteration 1]
    Total span:                    4 (total)                 1.00 (avg/edge) [iteration 2]
    Total span:                    4 (total)                 1.00 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    4 (total)                 1.00 (avg/edge) [before]
    Total span:                    4 (total)                 1.00 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name             Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ---------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_elevator_down  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   PusherLift       1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer  n/a   A_pusher         2      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ---------------  -----  --------  ----------  ----------  -----------
  Total                                           3      8         16          16          100%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     A_elevator_down.On
Initial   (aut/locs init predicate):     A_pusher.Off
Initial   (aut/locs init predicate):     PusherLift.One
Initial   (auts/locs init predicate):    A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Initial   (uncontrolled system):         A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Initial   (system, combined init/inv):   A_elevator_down.On and (PusherLift.One and A_pusher.Off)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   A_elevator_down.On
Marked    (aut/locs marker predicate):   A_pusher.Off
Marked    (aut/locs marker predicate):   PusherLift.One
Marked    (auts/locs marker predicate):  A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Marked    (uncontrolled system):         A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Marked    (system, combined marked/inv): A_elevator_down.On and (PusherLift.One and A_pusher.Off)

State/event exclusion requirements:
  Event "A_elevator_down_c_off" needs:
    PusherLift.One
  Event "A_pusher_c_on" needs:
    PusherLift.Two
  Event "A_pusher_c_off" needs:
    PusherLift.Three
  Event "A_elevator_down_c_on" needs:
    PusherLift.Four

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: A_elevator_down_c_off) (guard: A_elevator_down.On and PusherLift.One) (assignments: A_elevator_down := A_elevator_down.Off, PusherLift := PusherLift.Two)
    Edge: (event: A_elevator_down_c_off) (guard: (A_elevator_down.Off or not PusherLift.One) and A_elevator_down.On) (assignments: A_elevator_down := A_elevator_down.Off)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and PusherLift.Four) (assignments: A_elevator_down := A_elevator_down.On, PusherLift := PusherLift.One)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and (A_elevator_down.On or not PusherLift.Four)) (assignments: A_elevator_down := A_elevator_down.On)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.One and A_pusher.On or (PusherLift.Two or PusherLift.Four) and A_pusher.On) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three)
    Edge: (event: A_pusher_c_on) (guard: (PusherLift.One or PusherLift.Three) and A_pusher.Off or PusherLift.Four and A_pusher.Off) (assignments: A_pusher := A_pusher.On)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: A_elevator_down_c_off) (guard: (A_elevator_down.Off or not PusherLift.One) and A_elevator_down.On) (assignments: A_elevator_down := A_elevator_down.Off): guard: (A_elevator_down.Off or not PusherLift.One) and A_elevator_down.On -> false [requirement: PusherLift.One].
Edge (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and (A_elevator_down.On or not PusherLift.Four)) (assignments: A_elevator_down := A_elevator_down.On): guard: A_elevator_down.Off and (A_elevator_down.On or not PusherLift.Four) -> false [requirement: PusherLift.Four].
Edge (event: A_pusher_c_off) (guard: PusherLift.One and A_pusher.On or (PusherLift.Two or PusherLift.Four) and A_pusher.On) (assignments: A_pusher := A_pusher.Off): guard: PusherLift.One and A_pusher.On or (PusherLift.Two or PusherLift.Four) and A_pusher.On -> false [requirement: PusherLift.Three].
Edge (event: A_pusher_c_on) (guard: (PusherLift.One or PusherLift.Three) and A_pusher.Off or PusherLift.Four and A_pusher.Off) (assignments: A_pusher := A_pusher.On): guard: (PusherLift.One or PusherLift.Three) and A_pusher.Off or PusherLift.Four and A_pusher.Off -> false [requirement: PusherLift.Two].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: A_elevator_down_c_off) (guard: A_elevator_down.On and PusherLift.One) (assignments: A_elevator_down := A_elevator_down.Off, PusherLift := PusherLift.Two)
    Edge: (event: A_elevator_down_c_off) (guard: (A_elevator_down.Off or not PusherLift.One) and A_elevator_down.On -> false) (assignments: A_elevator_down := A_elevator_down.Off)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and PusherLift.Four) (assignments: A_elevator_down := A_elevator_down.On, PusherLift := PusherLift.One)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and (A_elevator_down.On or not PusherLift.Four) -> false) (assignments: A_elevator_down := A_elevator_down.On)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.One and A_pusher.On or (PusherLift.Two or PusherLift.Four) and A_pusher.On -> false) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three)
    Edge: (event: A_pusher_c_on) (guard: (PusherLift.One or PusherLift.Three) and A_pusher.Off or PusherLift.Four and A_pusher.Off -> false) (assignments: A_pusher := A_pusher.On)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or A_elevator_down.Off and (PusherLift.Four and A_pusher.Off) [backward reach with edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and PusherLift.Four) (assignments: A_elevator_down := A_elevator_down.On, PusherLift := PusherLift.One), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or A_elevator_down.Off and (PusherLift.Four and A_pusher.Off) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and (PusherLift.Four and A_pusher.Off)) [backward reach with edge: (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and (PusherLift.Four and A_pusher.Off)) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)) [backward reach with edge: (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)) [fixed point].
Controlled behavior: true -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (A_elevator_down.Off or (not PusherLift.One or A_pusher.On)) and ((A_elevator_down.On or (not PusherLift.Three or A_pusher.Off)) and (A_elevator_down.On or PusherLift.One or (PusherLift.Three or A_pusher.On))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or A_elevator_down.Off and (PusherLift.Two and A_pusher.Off) [forward reach with edge: (event: A_elevator_down_c_off) (guard: A_elevator_down.On and PusherLift.One) (assignments: A_elevator_down := A_elevator_down.Off, PusherLift := PusherLift.Two), restricted to current/previous controlled-behavior predicate: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off))]
Forward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or A_elevator_down.Off and (PusherLift.Two and A_pusher.Off) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and (PusherLift.Two and A_pusher.Off)) [forward reach with edge: (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three), restricted to current/previous controlled-behavior predicate: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off))]
Forward reachability: iteration 2.
Forward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and (PusherLift.Two and A_pusher.Off)) -> A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)) [forward reach with edge: (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four), restricted to current/previous controlled-behavior predicate: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off))]
Forward reachability: iteration 3.
Forward controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)) [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: A_elevator_down_c_off) (guard: A_elevator_down.On and PusherLift.One) (assignments: A_elevator_down := A_elevator_down.Off, PusherLift := PusherLift.Two): guard: A_elevator_down.On and PusherLift.One -> A_elevator_down.On and (PusherLift.One and A_pusher.Off).
Edge (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and PusherLift.Four) (assignments: A_elevator_down := A_elevator_down.On, PusherLift := PusherLift.One): guard: A_elevator_down.Off and PusherLift.Four -> A_elevator_down.Off and (PusherLift.Four and A_pusher.Off).
Edge (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four): guard: PusherLift.Three and A_pusher.On -> A_elevator_down.Off and (PusherLift.Three and A_pusher.On).
Edge (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three): guard: PusherLift.Two and A_pusher.Off -> A_elevator_down.Off and (PusherLift.Two and A_pusher.Off).

Final synthesis result:
  State: (controlled-behavior: A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off)))
    Edge: (event: A_elevator_down_c_off) (guard: A_elevator_down.On and PusherLift.One -> A_elevator_down.On and (PusherLift.One and A_pusher.Off)) (assignments: A_elevator_down := A_elevator_down.Off, PusherLift := PusherLift.Two)
    Edge: (event: A_elevator_down_c_off) (guard: (A_elevator_down.Off or not PusherLift.One) and A_elevator_down.On -> false) (assignments: A_elevator_down := A_elevator_down.Off)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and PusherLift.Four -> A_elevator_down.Off and (PusherLift.Four and A_pusher.Off)) (assignments: A_elevator_down := A_elevator_down.On, PusherLift := PusherLift.One)
    Edge: (event: A_elevator_down_c_on) (guard: A_elevator_down.Off and (A_elevator_down.On or not PusherLift.Four) -> false) (assignments: A_elevator_down := A_elevator_down.On)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.Three and A_pusher.On -> A_elevator_down.Off and (PusherLift.Three and A_pusher.On)) (assignments: A_pusher := A_pusher.Off, PusherLift := PusherLift.Four)
    Edge: (event: A_pusher_c_off) (guard: PusherLift.One and A_pusher.On or (PusherLift.Two or PusherLift.Four) and A_pusher.On -> false) (assignments: A_pusher := A_pusher.Off)
    Edge: (event: A_pusher_c_on) (guard: PusherLift.Two and A_pusher.Off -> A_elevator_down.Off and (PusherLift.Two and A_pusher.Off)) (assignments: A_pusher := A_pusher.On, PusherLift := PusherLift.Three)
    Edge: (event: A_pusher_c_on) (guard: (PusherLift.One or PusherLift.Three) and A_pusher.Off or PusherLift.Four and A_pusher.Off -> false) (assignments: A_pusher := A_pusher.On)

Controlled system:                     exactly 4 states.

Initial (synthesis result):            A_elevator_down.On and (PusherLift.One and A_pusher.Off) or (A_elevator_down.Off and (PusherLift.Three and A_pusher.On) or A_elevator_down.Off and ((PusherLift.Two or PusherLift.Four) and A_pusher.Off))
Initial (uncontrolled system):         A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Initial (controlled system):           A_elevator_down.On and (PusherLift.One and A_pusher.Off)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_elevator_down_c_off: guard: A_elevator_down.On and (PusherLift.One and A_pusher.Off) -> true [assume A_elevator_down.On and (PusherLift.One and A_pusher.Off)].
  Event A_elevator_down_c_on: guard: A_elevator_down.Off and (PusherLift.Four and A_pusher.Off) -> true [assume A_elevator_down.Off and (PusherLift.Four and A_pusher.Off)].
  Event A_pusher_c_off: guard: A_elevator_down.Off and (PusherLift.Three and A_pusher.On) -> true [assume A_elevator_down.Off and (PusherLift.Three and A_pusher.On)].
  Event A_pusher_c_on: guard: A_elevator_down.Off and (PusherLift.Two and A_pusher.Off) -> true [assume A_elevator_down.Off and (PusherLift.Two and A_pusher.Off)].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_1_sup.cif".
