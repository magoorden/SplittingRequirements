Reading CIF file "generated_files_modular_largereq/subplant_74.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_gate1         0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   S_gate1_closed  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   S_gate1_opened  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   S_gate2_closed  3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   S_gate2_opened  4      1 * 2     2 * 2       2 * 2       100%
  6      location pointer  n/a   S_Sinitialized  5      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          6      12        24          24          100%

Applying automatic variable ordering:
  Number of hyperedges: 13

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    8 (total)                 0.62 (avg/edge) [before]
    Total span:                    7 (total)                 0.54 (avg/edge) [iteration 1]
    Total span:                    7 (total)                 0.54 (avg/edge) [iteration 2]
    Total span:                    7 (total)                 0.54 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    7 (total)                 0.54 (avg/edge) [before]
    Total span:                    6 (total)                 0.46 (avg/edge) [window 2..5]
    Total span:                    6 (total)                 0.46 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_gate1         0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   S_gate1_opened  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   S_gate1_closed  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   S_Sinitialized  3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   S_gate2_closed  4      1 * 2     2 * 2       2 * 2       100%
  6      location pointer  n/a   S_gate2_opened  5      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          6      12        24          24          100%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     S_gate1_opened.On
Initial   (aut/locs init predicate):     S_gate1_closed.Off
Initial   (aut/locs init predicate):     S_gate2_opened.On
Initial   (aut/locs init predicate):     S_gate2_closed.Off
Initial   (aut/locs init predicate):     S_Sinitialized.Off
Initial   (aut/locs init predicate):     A_gate1.Off
Initial   (aut/locs init predicate):     true
Initial   (aut/locs init predicate):     true
Initial   (auts/locs init predicate):    A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Initial   (uncontrolled system):         A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Initial   (system, combined init/inv):   A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   S_gate1_opened.On
Marked    (aut/locs marker predicate):   S_gate1_closed.Off
Marked    (aut/locs marker predicate):   S_gate2_opened.On
Marked    (aut/locs marker predicate):   S_gate2_closed.Off
Marked    (aut/locs marker predicate):   S_Sinitialized.Off
Marked    (aut/locs marker predicate):   A_gate1.Off
Marked    (aut/locs marker predicate):   true
Marked    (aut/locs marker predicate):   true
Marked    (auts/locs marker predicate):  A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Marked    (uncontrolled system):         A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Marked    (system, combined marked/inv): A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))

State/event exclusion requirements:
  Event "A_gate1_c_off" needs:
    S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off)
    Edge: (event: S_gate1_opened_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_opened := S_gate1_opened.On)
    Edge: (event: S_gate1_closed_u_off) (guard: S_gate1_closed.On) (assignments: S_gate1_closed := S_gate1_closed.Off)
    Edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On)
    Edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off)
    Edge: (event: S_gate2_opened_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_opened := S_gate2_opened.On)
    Edge: (event: S_gate2_closed_u_off) (guard: S_gate2_closed.On) (assignments: S_gate2_closed := S_gate2_closed.Off)
    Edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On)
    Edge: (event: S_Sinitialized_u_off) (guard: S_Sinitialized.On) (assignments: S_Sinitialized := S_Sinitialized.Off)
    Edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On)
    Edge: (event: A_gate1_c_off) (guard: A_gate1.On) (assignments: A_gate1 := A_gate1.Off)
    Edge: (event: A_gate1_c_on) (guard: A_gate1.Off) (assignments: A_gate1 := A_gate1.On)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: A_gate1_c_off) (guard: A_gate1.On) (assignments: A_gate1 := A_gate1.Off): guard: A_gate1.On -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On) [requirement: S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off)
    Edge: (event: S_gate1_opened_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_opened := S_gate1_opened.On)
    Edge: (event: S_gate1_closed_u_off) (guard: S_gate1_closed.On) (assignments: S_gate1_closed := S_gate1_closed.Off)
    Edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On)
    Edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off)
    Edge: (event: S_gate2_opened_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_opened := S_gate2_opened.On)
    Edge: (event: S_gate2_closed_u_off) (guard: S_gate2_closed.On) (assignments: S_gate2_closed := S_gate2_closed.Off)
    Edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On)
    Edge: (event: S_Sinitialized_u_off) (guard: S_Sinitialized.On) (assignments: S_Sinitialized := S_Sinitialized.Off)
    Edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On)
    Edge: (event: A_gate1_c_off) (guard: A_gate1.On -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) (assignments: A_gate1 := A_gate1.Off)
    Edge: (event: A_gate1_c_on) (guard: A_gate1.Off) (assignments: A_gate1 := A_gate1.On)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [backward reach with edge: (event: S_gate1_opened_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_opened := S_gate1_opened.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On) [backward reach with edge: (event: S_gate1_closed_u_off) (guard: S_gate1_closed.On) (assignments: S_gate1_closed := S_gate1_closed.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off and S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On) -> A_gate1.Off and (S_Sinitialized.Off and S_gate2_closed.Off) [backward reach with edge: (event: S_gate2_opened_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_opened := S_gate2_opened.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off and (S_Sinitialized.Off and S_gate2_closed.Off) -> A_gate1.Off and S_Sinitialized.Off [backward reach with edge: (event: S_gate2_closed_u_off) (guard: S_gate2_closed.On) (assignments: S_gate2_closed := S_gate2_closed.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off and S_Sinitialized.Off -> A_gate1.Off [backward reach with edge: (event: S_Sinitialized_u_off) (guard: S_Sinitialized.On) (assignments: S_Sinitialized := S_Sinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On) or A_gate1.Off [backward reach with edge: (event: A_gate1_c_off) (guard: A_gate1.On -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) (assignments: A_gate1 := A_gate1.Off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On) or A_gate1.Off -> A_gate1.On and S_gate1_opened.On and (S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) or (A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and S_gate2_closed.On) or A_gate1.Off) [backward reach with edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.On and S_gate1_opened.On and (S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) or (A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and S_gate2_closed.On) or A_gate1.Off) -> (A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.Off) or (S_Sinitialized.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and (A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.Off or S_Sinitialized.On)) and ((A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.On)) and ((A_gate1.Off or S_gate1_opened.On or (S_Sinitialized.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and (A_gate1.Off or (S_gate1_opened.On or S_Sinitialized.On)))) [backward reach with edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.Off) or (S_Sinitialized.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and (A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.Off or S_Sinitialized.On)) and ((A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.On)) and ((A_gate1.Off or S_gate1_opened.On or (S_Sinitialized.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and (A_gate1.Off or (S_gate1_opened.On or S_Sinitialized.On)))) -> (A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and ((A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.On)) and (A_gate1.Off or S_gate1_opened.On or (S_gate2_closed.On or S_gate2_opened.Off))) [backward reach with edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: (A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.Off or (S_gate2_closed.On or S_gate2_opened.Off))) and ((A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.On)) and (A_gate1.Off or S_gate1_opened.On or (S_gate2_closed.On or S_gate2_opened.Off))) -> A_gate1.Off or (S_gate2_closed.On or S_gate2_opened.Off) [backward reach with edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_gate1.Off or (S_gate2_closed.On or S_gate2_opened.Off) -> true [backward reach with edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [forward reach with edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [forward reach with edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off) [forward reach with edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off) -> A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or (A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) [forward reach with edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or (A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) -> A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [forward reach with edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) -> (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [forward reach with edge: (event: A_gate1_c_on) (guard: A_gate1.Off) (assignments: A_gate1 := A_gate1.On), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [fixed point].
Controlled behavior: true -> (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [backward reach with edge: (event: S_gate1_opened_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_opened := S_gate1_opened.On), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.Off and S_gate1_closed.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) [backward reach with edge: (event: S_gate1_closed_u_off) (guard: S_gate1_closed.On) (assignments: S_gate1_closed := S_gate1_closed.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On)) -> A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off) [backward reach with edge: (event: S_gate2_opened_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_opened := S_gate2_opened.On), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off) -> A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or (A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) [backward reach with edge: (event: S_gate2_closed_u_off) (guard: S_gate2_closed.On) (assignments: S_gate2_closed := S_gate2_closed.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) or (A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.Off and (S_Sinitialized.Off and S_gate2_closed.Off)) -> A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [backward reach with edge: (event: S_Sinitialized_u_off) (guard: S_Sinitialized.On) (assignments: S_Sinitialized := S_Sinitialized.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) -> A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) [backward reach with edge: (event: A_gate1_c_off) (guard: A_gate1.On -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) (assignments: A_gate1 := A_gate1.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward reachability: iteration 2.
Backward controlled-behavior: A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) -> A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) [backward reach with edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) -> A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and S_gate2_opened.Off) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) [backward reach with edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: A_gate1.On and S_gate1_opened.Off and (S_Sinitialized.On and S_gate2_opened.Off) or A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.Off)) or (A_gate1.Off and S_gate1_opened.On and (S_gate1_closed.Off and S_gate2_closed.Off) or (A_gate1.Off and S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.Off) or A_gate1.Off and (S_gate1_opened.Off and S_gate2_closed.Off))) -> (A_gate1.Off or S_gate1_opened.Off) and (A_gate1.Off or (S_gate1_opened.On or S_gate2_opened.Off)) and ((A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))) [backward reach with edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward reachability: iteration 3.
Backward controlled-behavior: (A_gate1.Off or S_gate1_opened.Off) and (A_gate1.Off or (S_gate1_opened.On or S_gate2_opened.Off)) and ((A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))) -> (A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.On or S_gate2_opened.Off)) and (A_gate1.Off or (S_gate1_opened.On or S_gate2_opened.Off))) and ((A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))) [backward reach with edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward controlled-behavior: (A_gate1.Off or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.Off or S_gate1_opened.Off or (S_gate1_closed.On or S_gate2_opened.Off)) and (A_gate1.Off or (S_gate1_opened.On or S_gate2_opened.Off))) and ((A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))) -> (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [backward reach with edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off), restricted to current/previous controlled-behavior predicate: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))]
Backward reachability: iteration 4.
Backward controlled-behavior: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: S_gate1_opened.On and S_gate1_closed.On or (S_gate1_opened.On and S_gate1_closed.Off and (S_gate2_closed.On and S_gate2_opened.On) or S_gate1_opened.Off and (S_gate2_closed.On and S_gate2_opened.On)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: A_gate1_c_off) (guard: A_gate1.On -> A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On)) (assignments: A_gate1 := A_gate1.Off): guard: A_gate1.On and S_gate1_closed.On and (S_Sinitialized.On and S_gate2_closed.On) -> A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)).
Edge (event: A_gate1_c_on) (guard: A_gate1.Off) (assignments: A_gate1 := A_gate1.On): guard: A_gate1.Off -> A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))).

Final synthesis result:
  State: (controlled-behavior: (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))))
    Edge: (event: S_gate1_opened_u_off) (guard: S_gate1_opened.On) (assignments: S_gate1_opened := S_gate1_opened.Off)
    Edge: (event: S_gate1_opened_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_opened := S_gate1_opened.On)
    Edge: (event: S_gate1_closed_u_off) (guard: S_gate1_closed.On) (assignments: S_gate1_closed := S_gate1_closed.Off)
    Edge: (event: S_gate1_closed_u_on) (guard: S_gate1_opened.Off and S_gate1_closed.Off) (assignments: S_gate1_closed := S_gate1_closed.On)
    Edge: (event: S_gate2_opened_u_off) (guard: S_gate2_opened.On) (assignments: S_gate2_opened := S_gate2_opened.Off)
    Edge: (event: S_gate2_opened_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_opened := S_gate2_opened.On)
    Edge: (event: S_gate2_closed_u_off) (guard: S_gate2_closed.On) (assignments: S_gate2_closed := S_gate2_closed.Off)
    Edge: (event: S_gate2_closed_u_on) (guard: S_gate2_closed.Off and S_gate2_opened.Off) (assignments: S_gate2_closed := S_gate2_closed.On)
    Edge: (event: S_Sinitialized_u_off) (guard: S_Sinitialized.On) (assignments: S_Sinitialized := S_Sinitialized.Off)
    Edge: (event: S_Sinitialized_u_on) (guard: S_Sinitialized.Off) (assignments: S_Sinitialized := S_Sinitialized.On)
    Edge: (event: A_gate1_c_off) (guard: A_gate1.On -> A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off))) (assignments: A_gate1 := A_gate1.Off)
    Edge: (event: A_gate1_c_on) (guard: A_gate1.Off -> A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))) (assignments: A_gate1 := A_gate1.On)

Controlled system:                     exactly 36 states.

Initial (synthesis result):            (S_gate1_opened.Off or S_gate1_closed.Off) and ((S_gate1_opened.Off or S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off)) and (S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))
Initial (uncontrolled system):         A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Initial (controlled system):           A_gate1.Off and (S_gate1_opened.On and S_gate1_closed.Off) and (S_Sinitialized.Off and (S_gate2_closed.Off and S_gate2_opened.On))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_gate1_c_off: guard: A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off)) -> true [assume A_gate1.On and (S_gate1_opened.Off and S_gate1_closed.On) and (S_Sinitialized.On and (S_gate2_closed.On and S_gate2_opened.Off))].
  Event A_gate1_c_on: guard: A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off))) -> true [assume A_gate1.Off and (A_gate1.On or (S_gate1_opened.Off or S_gate1_closed.Off)) and ((A_gate1.On or S_gate1_opened.Off or (S_gate1_closed.On or (S_gate2_closed.Off or S_gate2_opened.Off))) and (A_gate1.On or S_gate1_opened.On or (S_gate2_closed.Off or S_gate2_opened.Off)))].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_74_sup.cif".
