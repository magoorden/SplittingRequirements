Reading CIF file "generated_files_modular_largereq/subplant_43.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_conveyerB     0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   BTimer          1      2 * 2     3 * 2       4 * 2       75%
  3      location pointer  n/a   S_Binitialized  2      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          3      8         14          16          ~88%

Applying automatic variable ordering:
  Number of hyperedges: 8

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    1 (total)                 0.13 (avg/edge) [before]
    Total span:                    1 (total)                 0.13 (avg/edge) [iteration 1]
    Total span:                    1 (total)                 0.13 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    1 (total)                 0.13 (avg/edge) [before]
    Total span:                    1 (total)                 0.13 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     S_Binitialized.Off
Initial   (aut/locs init predicate):     A_conveyerB.Off
Initial   (aut/locs init predicate):     BTimer.Off
Initial   (auts/locs init predicate):    A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off)
Initial   (uncontrolled system):         A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off)
Initial   (system, combined init/inv):   A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   S_Binitialized.Off
Marked    (aut/locs marker predicate):   A_conveyerB.Off
Marked    (aut/locs marker predicate):   not BTimer.Running
Marked    (auts/locs marker predicate):  A_conveyerB.Off and (not BTimer.Running and S_Binitialized.Off)
Marked    (uncontrolled system):         A_conveyerB.Off and (not BTimer.Running and S_Binitialized.Off)
Marked    (system, combined marked/inv): A_conveyerB.Off and (not BTimer.Running and S_Binitialized.Off)

State/event exclusion requirements:
  Event "A_conveyerB_c_off" needs:
    BTimer.Timeout and S_Binitialized.On

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: S_Binitialized_u_off) (guard: S_Binitialized.On) (assignments: S_Binitialized := S_Binitialized.Off)
    Edge: (event: S_Binitialized_u_on) (guard: S_Binitialized.Off) (assignments: S_Binitialized := S_Binitialized.On)
    Edge: (event: A_conveyerB_c_off) (guard: A_conveyerB.On) (assignments: A_conveyerB := A_conveyerB.Off)
    Edge: (event: A_conveyerB_c_on) (guard: A_conveyerB.Off) (assignments: A_conveyerB := A_conveyerB.On)
    Edge: (event: BTimer_c_on) (guard: BTimer.Off) (assignments: BTimer := BTimer.Running)
    Edge: (event: BTimer_u_timeout) (guard: BTimer.Running) (assignments: BTimer := BTimer.Timeout)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Running) (assignments: BTimer := BTimer.Off)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Timeout) (assignments: BTimer := BTimer.Off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "BTimer" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: A_conveyerB_c_off) (guard: A_conveyerB.On) (assignments: A_conveyerB := A_conveyerB.Off): guard: A_conveyerB.On -> A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On) [requirement: BTimer.Timeout and S_Binitialized.On].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: S_Binitialized_u_off) (guard: S_Binitialized.On) (assignments: S_Binitialized := S_Binitialized.Off)
    Edge: (event: S_Binitialized_u_on) (guard: S_Binitialized.Off) (assignments: S_Binitialized := S_Binitialized.On)
    Edge: (event: A_conveyerB_c_off) (guard: A_conveyerB.On -> A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On)) (assignments: A_conveyerB := A_conveyerB.Off)
    Edge: (event: A_conveyerB_c_on) (guard: A_conveyerB.Off) (assignments: A_conveyerB := A_conveyerB.On)
    Edge: (event: BTimer_c_on) (guard: BTimer.Off) (assignments: BTimer := BTimer.Running)
    Edge: (event: BTimer_u_timeout) (guard: BTimer.Running) (assignments: BTimer := BTimer.Timeout)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Running) (assignments: BTimer := BTimer.Off)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Timeout) (assignments: BTimer := BTimer.Off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_conveyerB.Off and (not BTimer.Running and S_Binitialized.Off) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_conveyerB.Off and (not BTimer.Running and S_Binitialized.Off) -> A_conveyerB.Off and not BTimer.Running [backward reach with edge: (event: S_Binitialized_u_off) (guard: S_Binitialized.On) (assignments: S_Binitialized := S_Binitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_conveyerB.Off and not BTimer.Running -> A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On) or A_conveyerB.Off and not BTimer.Running [backward reach with edge: (event: A_conveyerB_c_off) (guard: A_conveyerB.On -> A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On)) (assignments: A_conveyerB := A_conveyerB.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On) or A_conveyerB.Off and not BTimer.Running -> (A_conveyerB.Off or not BTimer.Off) and ((A_conveyerB.Off or (not BTimer.Timeout or S_Binitialized.On)) and (A_conveyerB.Off or (not BTimer.Running or S_Binitialized.On))) [backward reach with edge: (event: BTimer_u_timeout) (guard: BTimer.Running) (assignments: BTimer := BTimer.Timeout), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (A_conveyerB.Off or not BTimer.Off) and ((A_conveyerB.Off or (not BTimer.Timeout or S_Binitialized.On)) and (A_conveyerB.Off or (not BTimer.Running or S_Binitialized.On))) -> A_conveyerB.Off or not BTimer.Off [backward reach with edge: (event: S_Binitialized_u_on) (guard: S_Binitialized.Off) (assignments: S_Binitialized := S_Binitialized.On), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_conveyerB.Off or not BTimer.Off -> true [backward reach with edge: (event: BTimer_c_on) (guard: BTimer.Off) (assignments: BTimer := BTimer.Running), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off) -> A_conveyerB.Off and BTimer.Off [forward reach with edge: (event: S_Binitialized_u_on) (guard: S_Binitialized.Off) (assignments: S_Binitialized := S_Binitialized.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_conveyerB.Off and BTimer.Off -> BTimer.Off [forward reach with edge: (event: A_conveyerB_c_on) (guard: A_conveyerB.Off) (assignments: A_conveyerB := A_conveyerB.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: BTimer.Off -> not BTimer.Timeout [forward reach with edge: (event: BTimer_c_on) (guard: BTimer.Off) (assignments: BTimer := BTimer.Running), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not BTimer.Timeout -> true [forward reach with edge: (event: BTimer_u_timeout) (guard: BTimer.Running) (assignments: BTimer := BTimer.Timeout), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: A_conveyerB_c_on) (guard: A_conveyerB.Off) (assignments: A_conveyerB := A_conveyerB.On): guard: A_conveyerB.Off -> A_conveyerB.Off.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: S_Binitialized_u_off) (guard: S_Binitialized.On) (assignments: S_Binitialized := S_Binitialized.Off)
    Edge: (event: S_Binitialized_u_on) (guard: S_Binitialized.Off) (assignments: S_Binitialized := S_Binitialized.On)
    Edge: (event: A_conveyerB_c_off) (guard: A_conveyerB.On -> A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On)) (assignments: A_conveyerB := A_conveyerB.Off)
    Edge: (event: A_conveyerB_c_on) (guard: A_conveyerB.Off -> A_conveyerB.Off) (assignments: A_conveyerB := A_conveyerB.On)
    Edge: (event: BTimer_c_on) (guard: BTimer.Off) (assignments: BTimer := BTimer.Running)
    Edge: (event: BTimer_u_timeout) (guard: BTimer.Running) (assignments: BTimer := BTimer.Timeout)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Running) (assignments: BTimer := BTimer.Off)
    Edge: (event: BTimer_c_reset) (guard: BTimer.Timeout) (assignments: BTimer := BTimer.Off)

Controlled system:                     exactly 12 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off)
Initial (controlled system):           A_conveyerB.Off and (BTimer.Off and S_Binitialized.Off)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_conveyerB_c_off: guard: A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On) -> true [assume A_conveyerB.On and (BTimer.Timeout and S_Binitialized.On)].
  Event A_conveyerB_c_on: guard: A_conveyerB.Off -> true [assume A_conveyerB.Off].
  Event BTimer_c_on: guard: BTimer.Off -> true [assume BTimer.Off].
  Event BTimer_c_reset: guard: not BTimer.Off -> true [assume not BTimer.Off].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_43_sup.cif".
