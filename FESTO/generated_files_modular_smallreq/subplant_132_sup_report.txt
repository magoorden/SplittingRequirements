Reading CIF file "generated_files_modular_smallreq/subplant_132.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name            Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   A_drillup       0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   S_Pinitialized  1      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  --------------  -----  --------  ----------  ----------  -----------
  Total                                          2      4         8           8           100%

Applying automatic variable ordering:
  Number of hyperedges: 5

  Applying FORCE algorithm:
    Maximum number of iterations: 10

    Total span:                    0 (total)                 0.00 (avg/edge) [before]
    Total span:                    0 (total)                 0.00 (avg/edge) [iteration 1]
    Total span:                    0 (total)                 0.00 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 2

    Total span:                    0 (total)                 0.00 (avg/edge) [before]
    Total span:                    0 (total)                 0.00 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     S_Pinitialized.Off
Initial   (aut/locs init predicate):     A_drillup.On
Initial   (auts/locs init predicate):    A_drillup.On and S_Pinitialized.Off
Initial   (uncontrolled system):         A_drillup.On and S_Pinitialized.Off
Initial   (system, combined init/inv):   A_drillup.On and S_Pinitialized.Off

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   S_Pinitialized.Off
Marked    (aut/locs marker predicate):   A_drillup.On
Marked    (auts/locs marker predicate):  A_drillup.On and S_Pinitialized.Off
Marked    (uncontrolled system):         A_drillup.On and S_Pinitialized.Off
Marked    (system, combined marked/inv): A_drillup.On and S_Pinitialized.Off

State/event exclusion requirements:
  Event "A_drillup_c_off" needs:
    S_Pinitialized.On

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_drillup_c_off) (guard: A_drillup.On) (assignments: A_drillup := A_drillup.Off)
    Edge: (event: A_drillup_c_on) (guard: A_drillup.Off) (assignments: A_drillup := A_drillup.On)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: A_drillup_c_off) (guard: A_drillup.On) (assignments: A_drillup := A_drillup.Off): guard: A_drillup.On -> A_drillup.On and S_Pinitialized.On [requirement: S_Pinitialized.On].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_drillup_c_off) (guard: A_drillup.On -> A_drillup.On and S_Pinitialized.On) (assignments: A_drillup := A_drillup.Off)
    Edge: (event: A_drillup_c_on) (guard: A_drillup.Off) (assignments: A_drillup := A_drillup.On)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: A_drillup.On and S_Pinitialized.Off [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: A_drillup.On and S_Pinitialized.Off -> A_drillup.On [backward reach with edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: A_drillup.On -> true [backward reach with edge: (event: A_drillup_c_on) (guard: A_drillup.Off) (assignments: A_drillup := A_drillup.On), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A_drillup.On and S_Pinitialized.Off [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A_drillup.On and S_Pinitialized.Off -> A_drillup.On [forward reach with edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: A_drillup.On -> A_drillup.On or S_Pinitialized.On [forward reach with edge: (event: A_drillup_c_off) (guard: A_drillup.On -> A_drillup.On and S_Pinitialized.On) (assignments: A_drillup := A_drillup.Off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: A_drillup.On or S_Pinitialized.On -> true [forward reach with edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: S_Pinitialized_u_off) (guard: S_Pinitialized.On) (assignments: S_Pinitialized := S_Pinitialized.Off)
    Edge: (event: S_Pinitialized_u_on) (guard: S_Pinitialized.Off) (assignments: S_Pinitialized := S_Pinitialized.On)
    Edge: (event: A_drillup_c_off) (guard: A_drillup.On -> A_drillup.On and S_Pinitialized.On) (assignments: A_drillup := A_drillup.Off)
    Edge: (event: A_drillup_c_on) (guard: A_drillup.Off) (assignments: A_drillup := A_drillup.On)

Controlled system:                     exactly 4 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         A_drillup.On and S_Pinitialized.Off
Initial (controlled system):           A_drillup.On and S_Pinitialized.Off
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event A_drillup_c_off: guard: A_drillup.On and S_Pinitialized.On -> true [assume A_drillup.On and S_Pinitialized.On].
  Event A_drillup_c_on: guard: A_drillup.Off -> true [assume A_drillup.Off].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_smallreq/subplant_132_sup.cif".
