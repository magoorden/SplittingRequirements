Reading CIF file "generated_files_modular_smallreq/subplant_291.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name       Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ---------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button13   0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button9    1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   out_D_S_A  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   out_D_S_S  3      2 * 2     4 * 2       4 * 2       100%
  -----  ----------------  ----  ---------  -----  --------  ----------  ----------  -----------
  Total                                     4      10        20          20          100%

Applying automatic variable ordering:
  Number of hyperedges: 11

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    5 (total)                 0.45 (avg/edge) [before]
    Total span:                    5 (total)                 0.45 (avg/edge) [iteration 1]
    Total span:                    5 (total)                 0.45 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    5 (total)                 0.45 (avg/edge) [before]
    Total span:                    5 (total)                 0.45 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button9.released
Initial   (aut/locs init predicate):     button13.released
Initial   (aut/locs init predicate):     out_D_S_S.red
Initial   (aut/locs init predicate):     out_D_S_A.red
Initial   (auts/locs init predicate):    button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Initial   (uncontrolled system):         button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Initial   (system, combined init/inv):   button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button9.released
Marked    (aut/locs marker predicate):   button13.released
Marked    (aut/locs marker predicate):   out_D_S_S.red
Marked    (aut/locs marker predicate):   out_D_S_A.red
Marked    (auts/locs marker predicate):  button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Marked    (uncontrolled system):         button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Marked    (system, combined marked/inv): button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)

State/event exclusion requirements:
  Event "out_D_S_c_green" needs:
    button13.pushed and button9.released

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button9_u_push) (guard: button9.released) (assignments: button9 := button9.pushed)
    Edge: (event: button9_u_release) (guard: button9.pushed) (assignments: button9 := button9.released)
    Edge: (event: button13_u_push) (guard: button13.released) (assignments: button13 := button13.pushed)
    Edge: (event: button13_u_release) (guard: button13.pushed) (assignments: button13 := button13.released)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_c_green) (guard: out_D_S_A.red) (assignments: out_D_S_A := out_D_S_A.green)
    Edge: (event: out_D_S_c_red) (guard: out_D_S_A.green) (assignments: out_D_S_A := out_D_S_A.red)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: out_D_S_c_green) (guard: out_D_S_A.red) (assignments: out_D_S_A := out_D_S_A.green): guard: out_D_S_A.red -> button13.pushed and (button9.released and out_D_S_A.red) [requirement: button13.pushed and button9.released].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: button9_u_push) (guard: button9.released) (assignments: button9 := button9.pushed)
    Edge: (event: button9_u_release) (guard: button9.pushed) (assignments: button9 := button9.released)
    Edge: (event: button13_u_push) (guard: button13.released) (assignments: button13 := button13.pushed)
    Edge: (event: button13_u_release) (guard: button13.pushed) (assignments: button13 := button13.released)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_c_green) (guard: out_D_S_A.red -> button13.pushed and (button9.released and out_D_S_A.red)) (assignments: out_D_S_A := out_D_S_A.green)
    Edge: (event: out_D_S_c_red) (guard: out_D_S_A.green) (assignments: out_D_S_A := out_D_S_A.red)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red) -> button13.released and (out_D_S_A.red and out_D_S_S.red) [backward reach with edge: (event: button9_u_release) (guard: button9.pushed) (assignments: button9 := button9.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: button13.released and (out_D_S_A.red and out_D_S_S.red) -> out_D_S_A.red and out_D_S_S.red [backward reach with edge: (event: button13_u_release) (guard: button13.pushed) (assignments: button13 := button13.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: out_D_S_A.red and out_D_S_S.red -> out_D_S_A.red and (out_D_S_S.off or out_D_S_S.red) [backward reach with edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.red), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: out_D_S_A.red and (out_D_S_S.off or out_D_S_S.red) -> (out_D_S_A.green or not out_D_S_S.redgreen) and out_D_S_A.red [backward reach with edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (out_D_S_A.green or not out_D_S_S.redgreen) and out_D_S_A.red -> out_D_S_A.red [backward reach with edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.red), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: out_D_S_A.red -> true [backward reach with edge: (event: out_D_S_c_red) (guard: out_D_S_A.green) (assignments: out_D_S_A := out_D_S_A.red), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red) -> button13.released and (out_D_S_A.red and out_D_S_S.red) [forward reach with edge: (event: button9_u_push) (guard: button9.released) (assignments: button9 := button9.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button13.released and (out_D_S_A.red and out_D_S_S.red) -> out_D_S_A.red and out_D_S_S.red [forward reach with edge: (event: button13_u_push) (guard: button13.released) (assignments: button13 := button13.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: out_D_S_A.red and out_D_S_S.red -> button13.released and (out_D_S_A.red and out_D_S_S.red) or (button13.pushed and (button9.released and out_D_S_S.red) or button13.pushed and button9.pushed and (out_D_S_A.red and out_D_S_S.red)) [forward reach with edge: (event: out_D_S_c_green) (guard: out_D_S_A.red -> button13.pushed and (button9.released and out_D_S_A.red)) (assignments: out_D_S_A := out_D_S_A.green), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: button13.released and (out_D_S_A.red and out_D_S_S.red) or (button13.pushed and (button9.released and out_D_S_S.red) or button13.pushed and button9.pushed and (out_D_S_A.red and out_D_S_S.red)) -> button13.released and (out_D_S_A.red and out_D_S_S.red) or button13.pushed and out_D_S_S.red [forward reach with edge: (event: button9_u_push) (guard: button9.released) (assignments: button9 := button9.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button13.released and (out_D_S_A.red and out_D_S_S.red) or button13.pushed and out_D_S_S.red -> out_D_S_S.red [forward reach with edge: (event: button13_u_release) (guard: button13.pushed) (assignments: button13 := button13.released), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: out_D_S_S.red -> out_D_S_A.red and out_D_S_S.red or out_D_S_A.green and (out_D_S_S.red or out_D_S_S.redgreen) [forward reach with edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.redgreen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: out_D_S_A.red and out_D_S_S.red or out_D_S_A.green and (out_D_S_S.red or out_D_S_S.redgreen) -> out_D_S_A.red and out_D_S_S.red or (out_D_S_A.green and out_D_S_S.off or out_D_S_A.green and (out_D_S_S.red or out_D_S_S.redgreen)) [forward reach with edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.off), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: out_D_S_A.red and out_D_S_S.red or (out_D_S_A.green and out_D_S_S.off or out_D_S_A.green and (out_D_S_S.red or out_D_S_S.redgreen)) -> out_D_S_A.red and out_D_S_S.red or out_D_S_A.green [forward reach with edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.green), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: out_D_S_A.red and out_D_S_S.red or out_D_S_A.green -> true [forward reach with edge: (event: out_D_S_c_red) (guard: out_D_S_A.green) (assignments: out_D_S_A := out_D_S_A.red), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: button9_u_push) (guard: button9.released) (assignments: button9 := button9.pushed)
    Edge: (event: button9_u_release) (guard: button9.pushed) (assignments: button9 := button9.released)
    Edge: (event: button13_u_push) (guard: button13.released) (assignments: button13 := button13.pushed)
    Edge: (event: button13_u_release) (guard: button13.pushed) (assignments: button13 := button13.released)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_u_r_on) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.off) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_on) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.redgreen)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.red) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_r_off) (guard: out_D_S_A.green and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.green)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.green) (assignments: out_D_S_S := out_D_S_S.off)
    Edge: (event: out_D_S_u_g_off) (guard: out_D_S_A.red and out_D_S_S.redgreen) (assignments: out_D_S_S := out_D_S_S.red)
    Edge: (event: out_D_S_c_green) (guard: out_D_S_A.red -> button13.pushed and (button9.released and out_D_S_A.red)) (assignments: out_D_S_A := out_D_S_A.green)
    Edge: (event: out_D_S_c_red) (guard: out_D_S_A.green) (assignments: out_D_S_A := out_D_S_A.red)

Controlled system:                     exactly 32 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Initial (controlled system):           button13.released and button9.released and (out_D_S_A.red and out_D_S_S.red)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event out_D_S_c_green: guard: button13.pushed and (button9.released and out_D_S_A.red) -> true [assume button13.pushed and (button9.released and out_D_S_A.red)].
  Event out_D_S_c_red: guard: out_D_S_A.green -> true [assume out_D_S_A.green].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_smallreq/subplant_291_sup.cif".
