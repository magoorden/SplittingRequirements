Reading CIF file "generated_files_modular_smallreq/subplant_80.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   gate_U_S_Dir  0      2 * 2     3 * 2       4 * 2       75%
  2      location pointer  n/a   gate_U_S_S    1      3 * 2     7 * 2       8 * 2       ~88%
  3      location pointer  n/a   pad_N_A       2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   pad_N_S1      3      2 * 2     3 * 2       4 * 2       75%
  5      location pointer  n/a   pad_N_S2      4      2 * 2     3 * 2       4 * 2       75%
  6      location pointer  n/a   pad_N_S3      5      2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        6      26        44          56          ~79%

Applying automatic variable ordering:
  Number of hyperedges: 31

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   36 (total)                 1.16 (avg/edge) [before]
    Total span:                   28 (total)                 0.90 (avg/edge) [iteration 1]
    Total span:                   28 (total)                 0.90 (avg/edge) [iteration 2]
    Total span:                   28 (total)                 0.90 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   28 (total)                 0.90 (avg/edge) [before]
    Total span:                   28 (total)                 0.90 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   gate_U_S_Dir  0      2 * 2     3 * 2       4 * 2       75%
  2      location pointer  n/a   gate_U_S_S    1      3 * 2     7 * 2       8 * 2       ~88%
  3      location pointer  n/a   pad_N_S1      2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   pad_N_A       3      2 * 2     3 * 2       4 * 2       75%
  5      location pointer  n/a   pad_N_S2      4      2 * 2     3 * 2       4 * 2       75%
  6      location pointer  n/a   pad_N_S3      5      2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        6      26        44          56          ~79%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     pad_N_A.rest
Initial   (aut/locs init predicate):     pad_N_S1.closed
Initial   (aut/locs init predicate):     pad_N_S2.closed
Initial   (aut/locs init predicate):     pad_N_S3.closed
Initial   (aut/locs init predicate):     gate_U_S_S.closed
Initial   (aut/locs init predicate):     gate_U_S_Dir.off
Initial   (auts/locs init predicate):    <bdd 13n 1p>
Initial   (uncontrolled system):         <bdd 13n 1p>
Initial   (system, combined init/inv):   <bdd 13n 1p>

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   pad_N_A.rest
Marked    (aut/locs marker predicate):   pad_N_S1.closed
Marked    (aut/locs marker predicate):   pad_N_S2.closed
Marked    (aut/locs marker predicate):   pad_N_S3.closed
Marked    (aut/locs marker predicate):   gate_U_S_S.closed
Marked    (aut/locs marker predicate):   gate_U_S_Dir.off
Marked    (auts/locs marker predicate):  <bdd 13n 1p>
Marked    (uncontrolled system):         <bdd 13n 1p>
Marked    (system, combined marked/inv): <bdd 13n 1p>

State/event exclusion requirements:
  Event "gate_U_S_c_open" needs:
    pad_N_S1.closed

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_S_Dir" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_S_S" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 7/8)].
Controlled behavior: true -> <bdd 7n 12p> [range: true, variable: location pointer for automaton "pad_N_S1" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 7n 12p> -> <bdd 9n 24p> [range: true, variable: location pointer for automaton "pad_N_A" (group: 3, domain: 6+7, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 9n 24p> -> <bdd 11n 48p> [range: true, variable: location pointer for automaton "pad_N_S2" (group: 4, domain: 8+9, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 11n 48p> -> <bdd 13n 96p> [range: true, variable: location pointer for automaton "pad_N_S3" (group: 5, domain: 10+11, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: <bdd 13n 96p>.

Restricting behavior using state/event exclusion requirements.

Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and pad_N_S1.closed [requirement: pad_N_S1.closed].
Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.closing -> gate_U_S_Dir.closing and pad_N_S1.closed [requirement: pad_N_S1.closed].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: <bdd 13n 96p>)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and pad_N_S1.closed) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing -> gate_U_S_Dir.closing and pad_N_S1.closed) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 13n 1p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 13n 1p> -> <bdd 12n 1p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 12n 1p> -> <bdd 13n 2p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 13n 2p> -> <bdd 16n 3p> [backward reach with edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 16n 3p> -> <bdd 16n 4p> [backward reach with edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 16n 4p> -> <bdd 17n 5p> [backward reach with edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 17n 5p> -> <bdd 18n 8p> [backward reach with edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 18n 8p> -> <bdd 19n 8p> [backward reach with edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 19n 8p> -> <bdd 20n 14p> [backward reach with edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 20n 14p> -> <bdd 19n 14p> [backward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 19n 14p> -> <bdd 20n 28p> [backward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward reachability: iteration 2.
Backward controlled-behavior: <bdd 20n 28p> -> <bdd 18n 26p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 18n 26p> -> <bdd 13n 32p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 13n 32p> -> <bdd 14n 48p> [backward reach with edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 14n 48p> -> <bdd 15n 64p> [backward reach with edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 15n 64p> -> <bdd 14n 48p> [backward reach with edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 14n 48p> -> <bdd 16n 80p> [backward reach with edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 16n 80p> -> <bdd 15n 64p> [backward reach with edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 15n 64p> -> <bdd 16n 80p> [backward reach with edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 16n 80p> -> <bdd 15n 64p> [backward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward controlled-behavior: <bdd 15n 64p> -> <bdd 13n 96p> [backward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 13n 96p> [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 13n 93p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: <bdd 13n 1p> [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: <bdd 13n 1p> -> <bdd 12n 1p> [forward reach with edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 12n 1p> -> <bdd 13n 2p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 13n 2p> -> <bdd 15n 3p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 15n 3p> -> <bdd 15n 4p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 15n 4p> -> <bdd 15n 4p> [forward reach with edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 15n 4p> -> <bdd 16n 7p> [forward reach with edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 16n 7p> -> <bdd 17n 7p> [forward reach with edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 17n 7p> -> <bdd 18n 13p> [forward reach with edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 18n 13p> -> <bdd 24n 18p> [forward reach with edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and pad_N_S1.closed) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 24n 18p> -> <bdd 23n 18p> [forward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward reachability: iteration 2.
Forward controlled-behavior: <bdd 23n 18p> -> <bdd 25n 34p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 25n 34p> -> <bdd 17n 24p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 17n 24p> -> <bdd 19n 28p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 19n 28p> -> <bdd 20n 32p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 20n 32p> -> <bdd 19n 32p> [forward reach with edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 19n 32p> -> <bdd 20n 48p> [forward reach with edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 20n 48p> -> <bdd 18n 32p> [forward reach with edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 18n 32p> -> <bdd 20n 64p> [forward reach with edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 20n 64p> -> <bdd 19n 48p> [forward reach with edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 19n 48p> -> <bdd 20n 64p> [forward reach with edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 20n 64p> -> <bdd 24n 144p> [forward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 24n 144p> -> <bdd 20n 128p> [forward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 20n 128p> -> <bdd 21n 184p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward controlled-behavior: <bdd 21n 184p> -> <bdd 13n 96p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 13n 96p>]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 13n 96p> [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.rest -> <bdd 13n 48p>.
Edge (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.closing -> <bdd 13n 48p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.rest -> <bdd 13n 48p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.opening -> <bdd 13n 48p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.opening -> <bdd 13n 48p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.closing -> <bdd 13n 48p>.
Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and pad_N_S1.closed) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.off and pad_N_S1.closed -> <bdd 13n 24p>.
Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing -> gate_U_S_Dir.closing and pad_N_S1.closed) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.closing and pad_N_S1.closed -> <bdd 13n 24p>.
Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.off -> <bdd 13n 48p>.
Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.opening -> <bdd 13n 48p>.
Edge (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off): guard: gate_U_S_Dir.opening -> <bdd 13n 48p>.
Edge (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off): guard: gate_U_S_Dir.closing -> <bdd 13n 48p>.

Final synthesis result:
  State: (controlled-behavior: <bdd 13n 96p>)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing -> <bdd 13n 48p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off -> <bdd 13n 24p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing -> <bdd 13n 24p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off -> <bdd 13n 48p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> <bdd 13n 48p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening -> <bdd 13n 48p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing -> <bdd 13n 48p>) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Controlled system:                     exactly 1,701 states.

Initial (synthesis result):            <bdd 13n 96p>
Initial (uncontrolled system):         <bdd 13n 1p>
Initial (controlled system):           <bdd 13n 1p>
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event pad_N_c_open: guard: <bdd 12n 48p> -> true [assume <bdd 12n 48p>].
  Event pad_N_c_close: guard: <bdd 12n 48p> -> true [assume <bdd 12n 48p>].
  Event pad_N_c_stop: guard: <bdd 14n 96p> -> true [assume <bdd 14n 96p>].
  Event gate_U_S_c_open: guard: <bdd 12n 24p> -> true [assume <bdd 12n 24p>].
  Event gate_U_S_c_close: guard: <bdd 12n 48p> -> true [assume <bdd 12n 48p>].
  Event gate_U_S_c_stop: guard: <bdd 14n 96p> -> true [assume <bdd 14n 96p>].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_smallreq/subplant_80_sup.cif".
