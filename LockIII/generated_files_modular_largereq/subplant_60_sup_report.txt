Reading CIF file "generated_files_modular_largereq/subplant_60.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button3      0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button4      1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   culvert_S_A  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   culvert_S_S  3      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  Total                                       4      8         16          16          100%

Applying automatic variable ordering:
  Number of hyperedges: 9

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    3 (total)                 0.33 (avg/edge) [before]
    Total span:                    3 (total)                 0.33 (avg/edge) [iteration 1]
    Total span:                    3 (total)                 0.33 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    3 (total)                 0.33 (avg/edge) [before]
    Total span:                    3 (total)                 0.33 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button3.released
Initial   (aut/locs init predicate):     button4.released
Initial   (aut/locs init predicate):     culvert_S_A.closed
Initial   (aut/locs init predicate):     culvert_S_S.noflow
Initial   (auts/locs init predicate):    button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Initial   (uncontrolled system):         button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Initial   (system, combined init/inv):   button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button3.released
Marked    (aut/locs marker predicate):   button4.released
Marked    (aut/locs marker predicate):   culvert_S_A.closed
Marked    (aut/locs marker predicate):   culvert_S_S.noflow
Marked    (auts/locs marker predicate):  button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Marked    (uncontrolled system):         button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Marked    (system, combined marked/inv): button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)

State/event exclusion requirements:
  Event "culvert_S_c_enable" needs:
    button3.pushed and button4.released

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button3_u_push) (guard: button3.released) (assignments: button3 := button3.pushed)
    Edge: (event: button3_u_release) (guard: button3.pushed) (assignments: button3 := button3.released)
    Edge: (event: button4_u_push) (guard: button4.released) (assignments: button4 := button4.pushed)
    Edge: (event: button4_u_release) (guard: button4.pushed) (assignments: button4 := button4.released)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_A.closed and culvert_S_S.flow) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_A.open and culvert_S_S.noflow) (assignments: culvert_S_S := culvert_S_S.flow)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: culvert_S_c_enable) (guard: culvert_S_A.closed) (assignments: culvert_S_A := culvert_S_A.open): guard: culvert_S_A.closed -> button3.pushed and (button4.released and culvert_S_A.closed) [requirement: button3.pushed and button4.released].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: button3_u_push) (guard: button3.released) (assignments: button3 := button3.pushed)
    Edge: (event: button3_u_release) (guard: button3.pushed) (assignments: button3 := button3.released)
    Edge: (event: button4_u_push) (guard: button4.released) (assignments: button4 := button4.pushed)
    Edge: (event: button4_u_release) (guard: button4.pushed) (assignments: button4 := button4.released)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> button3.pushed and (button4.released and culvert_S_A.closed)) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_A.closed and culvert_S_S.flow) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_A.open and culvert_S_S.noflow) (assignments: culvert_S_S := culvert_S_S.flow)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) -> button4.released and (culvert_S_A.closed and culvert_S_S.noflow) [backward reach with edge: (event: button3_u_release) (guard: button3.pushed) (assignments: button3 := button3.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: button4.released and (culvert_S_A.closed and culvert_S_S.noflow) -> culvert_S_A.closed and culvert_S_S.noflow [backward reach with edge: (event: button4_u_release) (guard: button4.pushed) (assignments: button4 := button4.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: culvert_S_A.closed and culvert_S_S.noflow -> culvert_S_A.closed [backward reach with edge: (event: culvert_S_u_off) (guard: culvert_S_A.closed and culvert_S_S.flow) (assignments: culvert_S_S := culvert_S_S.noflow), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: culvert_S_A.closed -> true [backward reach with edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) -> button4.released and (culvert_S_A.closed and culvert_S_S.noflow) [forward reach with edge: (event: button3_u_push) (guard: button3.released) (assignments: button3 := button3.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button4.released and (culvert_S_A.closed and culvert_S_S.noflow) -> culvert_S_A.closed and culvert_S_S.noflow [forward reach with edge: (event: button4_u_push) (guard: button4.released) (assignments: button4 := button4.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_S_A.closed and culvert_S_S.noflow -> button3.released and (culvert_S_A.closed and culvert_S_S.noflow) or (button3.pushed and (button4.released and culvert_S_S.noflow) or button3.pushed and button4.pushed and (culvert_S_A.closed and culvert_S_S.noflow)) [forward reach with edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> button3.pushed and (button4.released and culvert_S_A.closed)) (assignments: culvert_S_A := culvert_S_A.open), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button3.released and (culvert_S_A.closed and culvert_S_S.noflow) or (button3.pushed and (button4.released and culvert_S_S.noflow) or button3.pushed and button4.pushed and (culvert_S_A.closed and culvert_S_S.noflow)) -> button3.released and (culvert_S_A.closed and culvert_S_S.noflow) or button3.pushed and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) or (button3.pushed and (button4.released and culvert_S_A.open) or button3.pushed and button4.pushed and (culvert_S_A.closed and culvert_S_S.noflow)) [forward reach with edge: (event: culvert_S_u_on) (guard: culvert_S_A.open and culvert_S_S.noflow) (assignments: culvert_S_S := culvert_S_S.flow), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: button3.released and (culvert_S_A.closed and culvert_S_S.noflow) or button3.pushed and button4.released and (culvert_S_A.closed and culvert_S_S.noflow) or (button3.pushed and (button4.released and culvert_S_A.open) or button3.pushed and button4.pushed and (culvert_S_A.closed and culvert_S_S.noflow)) -> (button4.pushed or (culvert_S_A.open or culvert_S_S.noflow)) and ((button4.released or (culvert_S_A.open or culvert_S_S.noflow)) and (button4.released or culvert_S_A.closed)) [forward reach with edge: (event: button3_u_release) (guard: button3.pushed) (assignments: button3 := button3.released), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (button4.pushed or (culvert_S_A.open or culvert_S_S.noflow)) and ((button4.released or (culvert_S_A.open or culvert_S_S.noflow)) and (button4.released or culvert_S_A.closed)) -> culvert_S_A.open or culvert_S_S.noflow [forward reach with edge: (event: button4_u_push) (guard: button4.released) (assignments: button4 := button4.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_S_A.open or culvert_S_S.noflow -> true [forward reach with edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: button3_u_push) (guard: button3.released) (assignments: button3 := button3.pushed)
    Edge: (event: button3_u_release) (guard: button3.pushed) (assignments: button3 := button3.released)
    Edge: (event: button4_u_push) (guard: button4.released) (assignments: button4 := button4.pushed)
    Edge: (event: button4_u_release) (guard: button4.pushed) (assignments: button4 := button4.released)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> button3.pushed and (button4.released and culvert_S_A.closed)) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_A.closed and culvert_S_S.flow) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_A.open and culvert_S_S.noflow) (assignments: culvert_S_S := culvert_S_S.flow)

Controlled system:                     exactly 16 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Initial (controlled system):           button3.released and button4.released and (culvert_S_A.closed and culvert_S_S.noflow)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event culvert_S_c_enable: guard: button3.pushed and (button4.released and culvert_S_A.closed) -> true [assume button3.pushed and (button4.released and culvert_S_A.closed)].
  Event culvert_S_c_disable: guard: culvert_S_A.open -> true [assume culvert_S_A.open].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_60_sup.cif".
