Reading CIF file "generated_files_modular_largereq/subplant_73.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button8        0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   emergencystop  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   gate_U_S_Dir   2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   gate_U_S_S     3      3 * 2     7 * 2       8 * 2       ~88%
  5      location pointer  n/a   stop2          4      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  Total                                         5      16        32          36          ~89%

Applying automatic variable ordering:
  Number of hyperedges: 22

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   16 (total)                 0.73 (avg/edge) [before]
    Total span:                   16 (total)                 0.73 (avg/edge) [iteration 1]
    Total span:                   16 (total)                 0.73 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   16 (total)                 0.73 (avg/edge) [before]
    Total span:                   15 (total)                 0.68 (avg/edge) [window 0..3]
    Total span:                   15 (total)                 0.68 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   gate_U_S_Dir   0      2 * 2     3 * 2       4 * 2       75%
  2      location pointer  n/a   gate_U_S_S     1      3 * 2     7 * 2       8 * 2       ~88%
  3      location pointer  n/a   button8        2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   emergencystop  3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   stop2          4      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  Total                                         5      16        32          36          ~89%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button8.released
Initial   (aut/locs init predicate):     emergencystop.released
Initial   (aut/locs init predicate):     stop2.released
Initial   (aut/locs init predicate):     gate_U_S_S.closed
Initial   (aut/locs init predicate):     gate_U_S_Dir.off
Initial   (auts/locs init predicate):    gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Initial   (uncontrolled system):         gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Initial   (system, combined init/inv):   gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button8.released
Marked    (aut/locs marker predicate):   emergencystop.released
Marked    (aut/locs marker predicate):   stop2.released
Marked    (aut/locs marker predicate):   gate_U_S_S.closed
Marked    (aut/locs marker predicate):   gate_U_S_Dir.off
Marked    (auts/locs marker predicate):  gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Marked    (uncontrolled system):         gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Marked    (system, combined marked/inv): gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))

State/event exclusion requirements:
  Event "gate_U_S_c_close" needs:
    gate_U_S_S.fopen and button8.pushed and (emergencystop.released and stop2.released) or ((gate_U_S_S.fclosed or gate_U_S_S.open) and button8.pushed and (emergencystop.released and stop2.released) or (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and button8.pushed and (emergencystop.released and stop2.released))

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop2_u_push) (guard: stop2.released) (assignments: stop2 := stop2.pushed)
    Edge: (event: stop2_u_release) (guard: stop2.pushed) (assignments: stop2 := stop2.released)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_S_Dir" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_S_S" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 7/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released))) [requirement: gate_U_S_S.fopen and button8.pushed and (emergencystop.released and stop2.released) or ((gate_U_S_S.fclosed or gate_U_S_S.open) and button8.pushed and (emergencystop.released and stop2.released) or (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and button8.pushed and (emergencystop.released and stop2.released))].
Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released))) [requirement: gate_U_S_S.fopen and button8.pushed and (emergencystop.released and stop2.released) or ((gate_U_S_S.fclosed or gate_U_S_S.open) and button8.pushed and (emergencystop.released and stop2.released) or (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and button8.pushed and (emergencystop.released and stop2.released))].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop2_u_push) (guard: stop2.released) (assignments: stop2 := stop2.pushed)
    Edge: (event: stop2_u_release) (guard: stop2.pushed) (assignments: stop2 := stop2.released)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released)) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released)) -> gate_U_S_Dir.off and gate_U_S_S.closed and (emergencystop.released and stop2.released) [backward reach with edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (emergencystop.released and stop2.released) -> gate_U_S_Dir.off and (gate_U_S_S.closed and stop2.released) [backward reach with edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and (gate_U_S_S.closed and stop2.released) -> gate_U_S_Dir.off and gate_U_S_S.closed [backward reach with edge: (event: stop2_u_release) (guard: stop2.pushed) (assignments: stop2 := stop2.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed -> not gate_U_S_Dir.closing and gate_U_S_S.closed [backward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: not gate_U_S_Dir.closing and gate_U_S_S.closed -> not gate_U_S_Dir.opening and gate_U_S_S.closed or gate_U_S_Dir.opening and gate_U_S_S.closed [backward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: not gate_U_S_Dir.opening and gate_U_S_S.closed or gate_U_S_Dir.opening and gate_U_S_S.closed -> gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.bclosed) or gate_U_S_Dir.opening and gate_U_S_S.closed) [backward reach with edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.bclosed) or gate_U_S_Dir.opening and gate_U_S_S.closed) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.fclosed) or (gate_U_S_Dir.closing and gate_U_S_S.bclosed or gate_U_S_Dir.opening and gate_U_S_S.closed) [backward reach with edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.fclosed) or (gate_U_S_Dir.closing and gate_U_S_S.bclosed or gate_U_S_Dir.opening and gate_U_S_S.closed) -> gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.closing and not gate_U_S_S.fopen and (not gate_U_S_S.bopen and not gate_U_S_S.open) or gate_U_S_Dir.opening and gate_U_S_S.closed) [backward reach with edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.closing and not gate_U_S_S.fopen and (not gate_U_S_S.bopen and not gate_U_S_S.open) or gate_U_S_Dir.opening and gate_U_S_S.closed) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.fopen) or (gate_U_S_Dir.closing and gate_U_S_S.fclosed or (gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.middle) or gate_U_S_Dir.opening and gate_U_S_S.closed)) [backward reach with edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and (gate_U_S_S.closed or gate_U_S_S.fopen) or (gate_U_S_Dir.closing and gate_U_S_S.fclosed or (gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.middle) or gate_U_S_Dir.opening and gate_U_S_S.closed)) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and not gate_U_S_S.fclosed and (not gate_U_S_S.middle and not gate_U_S_S.open) or (gate_U_S_Dir.closing and (gate_U_S_S.fclosed or gate_U_S_S.middle) or gate_U_S_Dir.opening and gate_U_S_S.closed) [backward reach with edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and not gate_U_S_S.fclosed and (not gate_U_S_S.middle and not gate_U_S_S.open) or (gate_U_S_Dir.closing and (gate_U_S_S.fclosed or gate_U_S_S.middle) or gate_U_S_Dir.opening and gate_U_S_S.closed) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and not gate_U_S_S.bclosed and (not gate_U_S_S.middle and not gate_U_S_S.bopen) or (gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.bopen) or (gate_U_S_Dir.closing and gate_U_S_S.middle or gate_U_S_Dir.opening and gate_U_S_S.closed)) [backward reach with edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.closing and not gate_U_S_S.bclosed and (not gate_U_S_S.middle and not gate_U_S_S.bopen) or (gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.bopen) or (gate_U_S_Dir.closing and gate_U_S_S.middle or gate_U_S_Dir.opening and gate_U_S_S.closed)) -> <bdd 16n 9p> [backward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 16n 9p> -> <bdd 14n 13p> [backward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 14n 13p> -> <bdd 13n 13p> [backward reach with edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 13n 13p> -> <bdd 12n 13p> [backward reach with edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 12n 13p> -> true [backward reach with edge: (event: stop2_u_release) (guard: stop2.pushed) (assignments: stop2 := stop2.released), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released)) -> gate_U_S_Dir.off and gate_U_S_S.closed and (emergencystop.released and stop2.released) [forward reach with edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed and (emergencystop.released and stop2.released) -> gate_U_S_Dir.off and (gate_U_S_S.closed and stop2.released) [forward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and (gate_U_S_S.closed and stop2.released) -> gate_U_S_Dir.off and gate_U_S_S.closed [forward reach with edge: (event: stop2_u_push) (guard: stop2.released) (assignments: stop2 := stop2.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed -> not gate_U_S_Dir.closing and gate_U_S_S.closed [forward reach with edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: not gate_U_S_Dir.closing and gate_U_S_S.closed -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.bclosed) [forward reach with edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.bclosed) -> gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.fclosed) or gate_U_S_Dir.opening and gate_U_S_S.bclosed) [forward reach with edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.fclosed) or gate_U_S_Dir.opening and gate_U_S_S.bclosed) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and not gate_U_S_S.fopen and (not gate_U_S_S.bopen and not gate_U_S_S.open) [forward reach with edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and not gate_U_S_S.fopen and (not gate_U_S_S.bopen and not gate_U_S_S.open) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.fopen) or (gate_U_S_Dir.opening and gate_U_S_S.fclosed or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.middle)) [forward reach with edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and (gate_U_S_S.closed or gate_U_S_S.fopen) or (gate_U_S_Dir.opening and gate_U_S_S.fclosed or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.middle)) -> gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.opening and not gate_U_S_S.fclosed and (not gate_U_S_S.middle and not gate_U_S_S.open) or gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.middle)) [forward reach with edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or (gate_U_S_Dir.opening and not gate_U_S_S.fclosed and (not gate_U_S_S.middle and not gate_U_S_S.open) or gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.middle)) -> gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and not gate_U_S_S.bclosed and (not gate_U_S_S.middle and not gate_U_S_S.bopen) or (gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.bopen) or gate_U_S_Dir.opening and gate_U_S_S.middle) [forward reach with edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_S_Dir.off and gate_U_S_S.closed or gate_U_S_Dir.opening and not gate_U_S_S.bclosed and (not gate_U_S_S.middle and not gate_U_S_S.bopen) or (gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.bopen) or gate_U_S_Dir.opening and gate_U_S_S.middle) -> <bdd 16n 8p> [forward reach with edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: <bdd 16n 8p> -> <bdd 14n 10p> [forward reach with edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 14n 10p> -> <bdd 13n 10p> [forward reach with edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: <bdd 13n 10p> -> <bdd 12n 10p> [forward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: <bdd 12n 10p> -> not gate_U_S_Dir.closing or not gate_U_S_S.closed [forward reach with edge: (event: stop2_u_push) (guard: stop2.released) (assignments: stop2 := stop2.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_U_S_Dir.closing or not gate_U_S_S.closed -> true [forward reach with edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.off -> not gate_U_S_Dir.closing and not gate_U_S_Dir.opening.
Edge (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening): guard: gate_U_S_Dir.closing -> not gate_U_S_Dir.off and not gate_U_S_Dir.opening.
Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released))) -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released))).
Edge (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing): guard: gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.bclosed or (gate_U_S_S.middle or gate_U_S_S.bopen)) and (button8.pushed and (emergencystop.released and stop2.released))) -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released))).
Edge (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off): guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening.
Edge (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing) (assignments: gate_U_S_Dir := gate_U_S_Dir.off): guard: gate_U_S_Dir.closing -> not gate_U_S_Dir.off and not gate_U_S_Dir.opening.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop2_u_push) (guard: stop2.released) (assignments: stop2 := stop2.pushed)
    Edge: (event: stop2_u_release) (guard: stop2.pushed) (assignments: stop2 := stop2.released)
    Edge: (event: gate_U_S_u_s1_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.closed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s1_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.closed)
    Edge: (event: gate_U_S_u_s2_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.bclosed) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s2_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.bclosed)
    Edge: (event: gate_U_S_u_s3_on) (guard: gate_U_S_Dir.opening and gate_U_S_S.fclosed) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s3_off) (guard: gate_U_S_Dir.closing and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fclosed)
    Edge: (event: gate_U_S_u_s4_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.middle) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s4_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.middle)
    Edge: (event: gate_U_S_u_s5_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.fopen) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_u_s5_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.fopen)
    Edge: (event: gate_U_S_u_s6_off) (guard: gate_U_S_Dir.opening and gate_U_S_S.bopen) (assignments: gate_U_S_S := gate_U_S_S.open)
    Edge: (event: gate_U_S_u_s6_on) (guard: gate_U_S_Dir.closing and gate_U_S_S.open) (assignments: gate_U_S_S := gate_U_S_S.bopen)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.off -> not gate_U_S_Dir.closing and not gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_open) (guard: gate_U_S_Dir.closing -> not gate_U_S_Dir.off and not gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.opening)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.off -> gate_U_S_Dir.off and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.off and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.off and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_close) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (gate_U_S_Dir.opening and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or gate_U_S_Dir.opening and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released)))) (assignments: gate_U_S_Dir := gate_U_S_Dir.closing)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.opening -> gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)
    Edge: (event: gate_U_S_c_stop) (guard: gate_U_S_Dir.closing -> not gate_U_S_Dir.off and not gate_U_S_Dir.opening) (assignments: gate_U_S_Dir := gate_U_S_Dir.off)

Controlled system:                     exactly 168 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Initial (controlled system):           gate_U_S_Dir.off and gate_U_S_S.closed and (button8.released and (emergencystop.released and stop2.released))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event gate_U_S_c_open: guard: not gate_U_S_Dir.opening -> true [assume not gate_U_S_Dir.opening].
  Event gate_U_S_c_close: guard: not gate_U_S_Dir.closing and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or not gate_U_S_Dir.closing and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (not gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or not gate_U_S_Dir.closing and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released))) -> true [assume not gate_U_S_Dir.closing and gate_U_S_S.fopen and (button8.pushed and (emergencystop.released and stop2.released)) or not gate_U_S_Dir.closing and (gate_U_S_S.fclosed or gate_U_S_S.open) and (button8.pushed and (emergencystop.released and stop2.released)) or (not gate_U_S_Dir.closing and (gate_U_S_S.bclosed or gate_U_S_S.bopen) and (button8.pushed and (emergencystop.released and stop2.released)) or not gate_U_S_Dir.closing and gate_U_S_S.middle and (button8.pushed and (emergencystop.released and stop2.released)))].
  Event gate_U_S_c_stop: guard: not gate_U_S_Dir.off -> true [assume not gate_U_S_Dir.off].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_73_sup.cif".
