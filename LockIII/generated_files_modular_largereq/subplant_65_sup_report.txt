Reading CIF file "generated_files_modular_largereq/subplant_65.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   emergencystop  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   gate_D_N_Dir   1      2 * 2     3 * 2       4 * 2       75%
  3      location pointer  n/a   gate_D_N_S     2      3 * 2     7 * 2       8 * 2       ~88%
  4      location pointer  n/a   stop1          3      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  Total                                         4      14        28          32          ~88%

Applying automatic variable ordering:
  Number of hyperedges: 20

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   15 (total)                 0.75 (avg/edge) [before]
    Total span:                   15 (total)                 0.75 (avg/edge) [iteration 1]
    Total span:                   15 (total)                 0.75 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   15 (total)                 0.75 (avg/edge) [before]
    Total span:                   15 (total)                 0.75 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     emergencystop.released
Initial   (aut/locs init predicate):     stop1.released
Initial   (aut/locs init predicate):     gate_D_N_S.closed
Initial   (aut/locs init predicate):     gate_D_N_Dir.off
Initial   (auts/locs init predicate):    emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Initial   (uncontrolled system):         emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Initial   (system, combined init/inv):   emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   emergencystop.released
Marked    (aut/locs marker predicate):   stop1.released
Marked    (aut/locs marker predicate):   gate_D_N_S.closed
Marked    (aut/locs marker predicate):   gate_D_N_Dir.off
Marked    (auts/locs marker predicate):  emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Marked    (uncontrolled system):         emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Marked    (system, combined marked/inv): emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)

State/event exclusion requirements:
  Event "gate_D_N_c_stop" needs:
    <bdd 11n 11p>

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop1_u_push) (guard: stop1.released) (assignments: stop1 := stop1.pushed)
    Edge: (event: stop1_u_release) (guard: stop1.pushed) (assignments: stop1 := stop1.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_D_N_Dir" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_D_N_S" (group: 2, domain: 4+5, BDD variables: 3, CIF/BDD values: 7/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: gate_D_N_Dir.opening -> emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening)) [requirement: <bdd 11n 11p>].
Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: gate_D_N_Dir.closing -> emergencystop.released and (gate_D_N_Dir.closing and gate_D_N_S.closed) or emergencystop.released and gate_D_N_Dir.closing and (gate_D_N_S.fopen and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.fclosed or gate_D_N_S.open) and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.closing)) [requirement: <bdd 11n 11p>].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop1_u_push) (guard: stop1.released) (assignments: stop1 := stop1.pushed)
    Edge: (event: stop1_u_release) (guard: stop1.pushed) (assignments: stop1 := stop1.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing -> emergencystop.released and (gate_D_N_Dir.closing and gate_D_N_S.closed) or emergencystop.released and gate_D_N_Dir.closing and (gate_D_N_S.fopen and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.fclosed or gate_D_N_S.open) and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.closing))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) -> gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) [backward reach with edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) -> gate_D_N_Dir.off and gate_D_N_S.closed [backward reach with edge: (event: stop1_u_release) (guard: stop1.pushed) (assignments: stop1 := stop1.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed -> <bdd 11n 3p> [backward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 11n 3p> -> <bdd 12n 4p> [backward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing -> emergencystop.released and (gate_D_N_Dir.closing and gate_D_N_S.closed) or emergencystop.released and gate_D_N_Dir.closing and (gate_D_N_S.fopen and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.fclosed or gate_D_N_S.open) and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.closing))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: <bdd 12n 4p> -> not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and gate_D_N_S.closed [backward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and gate_D_N_S.closed -> gate_D_N_Dir.off and gate_D_N_S.closed or (gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.bclosed) or gate_D_N_Dir.opening and gate_D_N_S.closed) [backward reach with edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or (gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.bclosed) or gate_D_N_Dir.opening and gate_D_N_S.closed) -> gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fclosed) or (gate_D_N_Dir.closing and gate_D_N_S.bclosed or gate_D_N_Dir.opening and gate_D_N_S.closed) [backward reach with edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fclosed) or (gate_D_N_Dir.closing and gate_D_N_S.bclosed or gate_D_N_Dir.opening and gate_D_N_S.closed) -> gate_D_N_Dir.off and gate_D_N_S.closed or (gate_D_N_Dir.closing and not gate_D_N_S.fopen and (not gate_D_N_S.bopen and not gate_D_N_S.open) or gate_D_N_Dir.opening and gate_D_N_S.closed) [backward reach with edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or (gate_D_N_Dir.closing and not gate_D_N_S.fopen and (not gate_D_N_S.bopen and not gate_D_N_S.open) or gate_D_N_Dir.opening and gate_D_N_S.closed) -> gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed or (gate_D_N_Dir.closing and (gate_D_N_S.bclosed or gate_D_N_S.middle) or gate_D_N_Dir.opening and gate_D_N_S.closed)) [backward reach with edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed or (gate_D_N_Dir.closing and (gate_D_N_S.bclosed or gate_D_N_S.middle) or gate_D_N_Dir.opening and gate_D_N_S.closed)) -> gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and not gate_D_N_S.fclosed and (not gate_D_N_S.middle and not gate_D_N_S.open) or (gate_D_N_Dir.closing and (gate_D_N_S.fclosed or gate_D_N_S.middle) or gate_D_N_Dir.opening and gate_D_N_S.closed) [backward reach with edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and not gate_D_N_S.fclosed and (not gate_D_N_S.middle and not gate_D_N_S.open) or (gate_D_N_Dir.closing and (gate_D_N_S.fclosed or gate_D_N_S.middle) or gate_D_N_Dir.opening and gate_D_N_S.closed) -> gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen) or (gate_D_N_Dir.closing and (gate_D_N_S.bclosed or gate_D_N_S.bopen) or (gate_D_N_Dir.closing and gate_D_N_S.middle or gate_D_N_Dir.opening and gate_D_N_S.closed)) [backward reach with edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed or gate_D_N_Dir.closing and not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen) or (gate_D_N_Dir.closing and (gate_D_N_S.bclosed or gate_D_N_S.bopen) or (gate_D_N_Dir.closing and gate_D_N_S.middle or gate_D_N_Dir.opening and gate_D_N_S.closed)) -> (not gate_D_N_Dir.opening or not gate_D_N_S.fopen) and ((not gate_D_N_Dir.opening or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (not gate_D_N_Dir.opening or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) [backward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (not gate_D_N_Dir.opening or not gate_D_N_S.fopen) and ((not gate_D_N_Dir.opening or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (not gate_D_N_Dir.opening or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) -> true [backward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) -> gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) [forward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released) -> gate_D_N_Dir.off and gate_D_N_S.closed [forward reach with edge: (event: stop1_u_push) (guard: stop1.released) (assignments: stop1 := stop1.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed -> not gate_D_N_Dir.closing and gate_D_N_S.closed [forward reach with edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.closing and gate_D_N_S.closed -> not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and gate_D_N_S.closed [forward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and gate_D_N_S.closed -> not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.bclosed) [forward reach with edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.bclosed) -> not gate_D_N_Dir.opening and gate_D_N_S.closed or (gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.fclosed) or gate_D_N_Dir.opening and gate_D_N_S.bclosed) [forward reach with edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or (gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.fclosed) or gate_D_N_Dir.opening and gate_D_N_S.bclosed) -> not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and not gate_D_N_S.fopen and (not gate_D_N_S.bopen and not gate_D_N_S.open) [forward reach with edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and not gate_D_N_S.fopen and (not gate_D_N_S.bopen and not gate_D_N_S.open) -> not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.fopen) or (gate_D_N_Dir.opening and gate_D_N_S.fclosed or gate_D_N_Dir.opening and (gate_D_N_S.bclosed or gate_D_N_S.middle)) [forward reach with edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.fopen) or (gate_D_N_Dir.opening and gate_D_N_S.fclosed or gate_D_N_Dir.opening and (gate_D_N_S.bclosed or gate_D_N_S.middle)) -> not gate_D_N_Dir.opening and gate_D_N_S.closed or (gate_D_N_Dir.opening and not gate_D_N_S.fclosed and (not gate_D_N_S.middle and not gate_D_N_S.open) or gate_D_N_Dir.opening and (gate_D_N_S.fclosed or gate_D_N_S.middle)) [forward reach with edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed or (gate_D_N_Dir.opening and not gate_D_N_S.fclosed and (not gate_D_N_S.middle and not gate_D_N_S.open) or gate_D_N_Dir.opening and (gate_D_N_S.fclosed or gate_D_N_S.middle)) -> (gate_D_N_Dir.opening or not gate_D_N_S.fopen) and ((gate_D_N_Dir.opening or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (gate_D_N_Dir.opening or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) [forward reach with edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (gate_D_N_Dir.opening or not gate_D_N_S.fopen) and ((gate_D_N_Dir.opening or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (gate_D_N_Dir.opening or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) -> (not gate_D_N_Dir.off or not gate_D_N_S.fopen) and ((not gate_D_N_Dir.off or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (not gate_D_N_Dir.off or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) [forward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (not gate_D_N_Dir.off or not gate_D_N_S.fopen) and ((not gate_D_N_Dir.off or not gate_D_N_S.fclosed and not gate_D_N_S.open) and (not gate_D_N_Dir.off or not gate_D_N_S.bclosed and (not gate_D_N_S.middle and not gate_D_N_S.bopen))) -> <bdd 15n 18p> [forward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 15n 18p> -> true [forward reach with edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.off -> not gate_D_N_Dir.closing and not gate_D_N_Dir.opening.
Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.closing -> not gate_D_N_Dir.off and not gate_D_N_Dir.opening.
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.off -> not gate_D_N_Dir.closing and not gate_D_N_Dir.opening.
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening.
Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.closed or gate_D_N_S.fopen) and stop1.pushed) or emergencystop.released and gate_D_N_Dir.opening and (gate_D_N_S.fclosed and stop1.pushed) or (emergencystop.released and (gate_D_N_Dir.opening and gate_D_N_S.open) or (emergencystop.released and gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.opening)) -> <bdd 14n 8p>.
Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing -> emergencystop.released and (gate_D_N_Dir.closing and gate_D_N_S.closed) or emergencystop.released and gate_D_N_Dir.closing and (gate_D_N_S.fopen and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.fclosed or gate_D_N_S.open) and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.closing))) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: emergencystop.released and (gate_D_N_Dir.closing and gate_D_N_S.closed) or emergencystop.released and gate_D_N_Dir.closing and (gate_D_N_S.fopen and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.fclosed or gate_D_N_S.open) and stop1.pushed) or (emergencystop.released and gate_D_N_Dir.closing and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and stop1.pushed) or emergencystop.pushed and gate_D_N_Dir.closing)) -> <bdd 14n 8p>.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop1_u_push) (guard: stop1.released) (assignments: stop1 := stop1.pushed)
    Edge: (event: stop1_u_release) (guard: stop1.pushed) (assignments: stop1 := stop1.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off -> not gate_D_N_Dir.closing and not gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing -> not gate_D_N_Dir.off and not gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off -> not gate_D_N_Dir.closing and not gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> <bdd 14n 8p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing -> <bdd 14n 8p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)

Controlled system:                     exactly 84 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Initial (controlled system):           emergencystop.released and gate_D_N_Dir.off and (gate_D_N_S.closed and stop1.released)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event gate_D_N_c_open: guard: not gate_D_N_Dir.opening -> true [assume not gate_D_N_Dir.opening].
  Event gate_D_N_c_close: guard: not gate_D_N_Dir.closing -> true [assume not gate_D_N_Dir.closing].
  Event gate_D_N_c_stop: guard: <bdd 19n 16p> -> true [assume <bdd 19n 16p>].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_65_sup.cif".
