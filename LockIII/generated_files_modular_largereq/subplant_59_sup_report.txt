Reading CIF file "generated_files_modular_largereq/subplant_59.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   culvert_N_A    0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   culvert_N_S    1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   emergencystop  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   stop3          3      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  -------------  -----  --------  ----------  ----------  -----------
  Total                                         4      8         16          16          100%

Applying automatic variable ordering:
  Number of hyperedges: 9

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    3 (total)                 0.33 (avg/edge) [before]
    Total span:                    3 (total)                 0.33 (avg/edge) [iteration 1]
    Total span:                    3 (total)                 0.33 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    3 (total)                 0.33 (avg/edge) [before]
    Total span:                    3 (total)                 0.33 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     emergencystop.released
Initial   (aut/locs init predicate):     stop3.released
Initial   (aut/locs init predicate):     culvert_N_A.closed
Initial   (aut/locs init predicate):     culvert_N_S.noflow
Initial   (auts/locs init predicate):    culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Initial   (uncontrolled system):         culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Initial   (system, combined init/inv):   culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   emergencystop.released
Marked    (aut/locs marker predicate):   stop3.released
Marked    (aut/locs marker predicate):   culvert_N_A.closed
Marked    (aut/locs marker predicate):   culvert_N_S.noflow
Marked    (auts/locs marker predicate):  culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Marked    (uncontrolled system):         culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Marked    (system, combined marked/inv): culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)

State/event exclusion requirements:
  Event "culvert_N_c_enable" needs:
    emergencystop.released and stop3.released

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop3_u_push) (guard: stop3.released) (assignments: stop3 := stop3.pushed)
    Edge: (event: stop3_u_release) (guard: stop3.pushed) (assignments: stop3 := stop3.released)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open): guard: culvert_N_A.closed -> culvert_N_A.closed and (emergencystop.released and stop3.released) [requirement: emergencystop.released and stop3.released].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop3_u_push) (guard: stop3.released) (assignments: stop3 := stop3.pushed)
    Edge: (event: stop3_u_release) (guard: stop3.pushed) (assignments: stop3 := stop3.released)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> culvert_N_A.closed and (emergencystop.released and stop3.released)) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released) -> culvert_N_A.closed and (culvert_N_S.noflow and stop3.released) [backward reach with edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: culvert_N_A.closed and (culvert_N_S.noflow and stop3.released) -> culvert_N_A.closed and culvert_N_S.noflow [backward reach with edge: (event: stop3_u_release) (guard: stop3.pushed) (assignments: stop3 := stop3.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow -> culvert_N_A.closed [backward reach with edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: culvert_N_A.closed -> true [backward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released) -> culvert_N_A.closed and (culvert_N_S.noflow and stop3.released) [forward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_N_A.closed and (culvert_N_S.noflow and stop3.released) -> culvert_N_A.closed and culvert_N_S.noflow [forward reach with edge: (event: stop3_u_push) (guard: stop3.released) (assignments: stop3 := stop3.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow -> culvert_N_A.closed and culvert_N_S.noflow or culvert_N_A.open and culvert_N_S.noflow and (emergencystop.released and stop3.released) [forward reach with edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> culvert_N_A.closed and (emergencystop.released and stop3.released)) (assignments: culvert_N_A := culvert_N_A.open), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow or culvert_N_A.open and culvert_N_S.noflow and (emergencystop.released and stop3.released) -> culvert_N_A.closed and culvert_N_S.noflow or culvert_N_A.open and (emergencystop.released and stop3.released) [forward reach with edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: culvert_N_A.closed and culvert_N_S.noflow or culvert_N_A.open and (emergencystop.released and stop3.released) -> (culvert_N_A.open or culvert_N_S.noflow) and (culvert_N_A.closed or stop3.released) [forward reach with edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (culvert_N_A.open or culvert_N_S.noflow) and (culvert_N_A.closed or stop3.released) -> culvert_N_A.open or culvert_N_S.noflow [forward reach with edge: (event: stop3_u_push) (guard: stop3.released) (assignments: stop3 := stop3.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: culvert_N_A.open or culvert_N_S.noflow -> true [forward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: emergencystop_u_push) (guard: emergencystop.released) (assignments: emergencystop := emergencystop.pushed)
    Edge: (event: emergencystop_u_release) (guard: emergencystop.pushed) (assignments: emergencystop := emergencystop.released)
    Edge: (event: stop3_u_push) (guard: stop3.released) (assignments: stop3 := stop3.pushed)
    Edge: (event: stop3_u_release) (guard: stop3.pushed) (assignments: stop3 := stop3.released)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> culvert_N_A.closed and (emergencystop.released and stop3.released)) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)

Controlled system:                     exactly 16 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Initial (controlled system):           culvert_N_A.closed and culvert_N_S.noflow and (emergencystop.released and stop3.released)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event culvert_N_c_enable: guard: culvert_N_A.closed and (emergencystop.released and stop3.released) -> true [assume culvert_N_A.closed and (emergencystop.released and stop3.released)].
  Event culvert_N_c_disable: guard: culvert_N_A.open -> true [assume culvert_N_A.open].

Constructing output CIF specification.
Writing output CIF file "generated_files_modular_largereq/subplant_59_sup.cif".
